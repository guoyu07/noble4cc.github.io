<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>noble4cc&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://noble4cc.me/"/>
  <updated>2016-05-26T13:29:52.000Z</updated>
  <id>http://noble4cc.me/</id>
  
  <author>
    <name>noble4cc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP的自动装载机制</title>
    <link href="http://noble4cc.me/Automatic-loading-mechanism-of-PHP/"/>
    <id>http://noble4cc.me/Automatic-loading-mechanism-of-PHP/</id>
    <published>2016-05-17T08:07:05.000Z</published>
    <updated>2016-05-26T13:29:52.000Z</updated>
    
    <content type="html">&lt;p&gt;PHP是一种脚本语言，每个php文件必须通过require和include打开后才能使用其中的代码，在以前的版本中也就是PHP5之前的版本，我们想使用一个文件必须require活着include，PHP5中引入了自动加载机制来解决这个问题。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;自动加载机制&quot;&gt;&lt;a href=&quot;#自动加载机制&quot; class=&quot;headerlink&quot; title=&quot;自动加载机制&quot;&gt;&lt;/a&gt;自动加载机制&lt;/h2&gt;&lt;p&gt;在以前的编写PHP程序中，我们需要如果要引入别的文件，必须要require活着include，如果不引入就会提示找不到。也就是说我们每使用一个文件，就必须require或者include一下。但是这样在项目中文件较少的情况下还好但是如果你项目中有成百上千个文件，这种管理方式可能就没这么方便了，可能会存在遗漏的情况，也可能存在多次引用的情况。&lt;br&gt;于是，有聪明人想出了一个办法，单独定义一个文件，比如说名字叫做&lt;code&gt;files.php&lt;/code&gt;，里面定义了大量的require命令，可能如下：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;file1.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;file2.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;file3.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;file4.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;filen.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次我们需要在程序的一开始我们就引入files.php文件，也就是通过这个文件引入所有的文件，这样就不担心找不到或者多次引入了（&lt;code&gt;多次引入文件，如果文件内只有字段还好不会报错，但是如果存在函数的话，会报重复定义这个错误&lt;/code&gt;）。&lt;br&gt;是的，这样简单粗暴，但是这样也会存在一些问题的，一次性再入大量引入大量的文件会占用太多的系统资源，定义的变量、类和函数等资源会载入内存中，这会导致占用大量的资源。&lt;br&gt;有没有更好方式呢？PHP官方给出的解决方案是使用PHP自动加载机制，PHP自动加载机制有两种一个是使用魔术方法__autoload，另外是使用spl中的函数spl_autoload_register实现。&lt;/p&gt;
&lt;h2 id=&quot;autoload&quot;&gt;&lt;a href=&quot;#autoload&quot; class=&quot;headerlink&quot; title=&quot;__autoload&quot;&gt;&lt;/a&gt;__autoload&lt;/h2&gt;&lt;p&gt;autoload魔术方法是在PHP5中才引入的，以前的版本是无法使用的。这个方法默认是不存在的，你需要自己定义它。&lt;br&gt;具体原理是，当你引入使用一个类在该文件中不存在的时，不会直接报出错误，二十先调用这个方法，这个方法的唯一参数是你使用的类的名字。如果该函数执行完后还是找不到要执行的类，php解释器就会报一个错。依就是说在报错之前执行你自定义的处理方法，尽量的找到这些文件。&lt;br&gt;我们怎样在解释器报错之前怎样处理才合适呢？比如，我们在当前执行文件的目录下创建一个目录名字叫Models，在Models目录下存在一个文件名字叫SomeModel.php，SomeModel文件内代码和执行文件代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//SomeModel.php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeModel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;this is some model&#39;&lt;/span&gt;,PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//main.php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$somdel=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SomeModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__autoload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($classname)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($classname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $file=&lt;span class=&quot;string&quot;&gt;&#39;Models&#39;&lt;/span&gt;.$classname;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(file_exists($file))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; ($file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果如下：&lt;code&gt;this is some model&lt;/code&gt;;&lt;br&gt;完全可以执行，没有报错。在__autoload方法里我们定义了规则，我们通过拼接字符串得到文件的名字。然后判断该文件是否存在,如果存在我们就require这个文件。通过这种机制我们在没有事先require文件，就可以使用文件中定义的内容。&lt;br&gt;如果我们使用namespace呢，员也是一样的，我们可以修改一下上面的程序。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//SomeModel.php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Models&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//定义namespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeModel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;this is some model&#39;&lt;/span&gt;,PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//main.php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Models&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;SomeModel&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//引入namespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$somdel=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SomeModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__autoload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($classname)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($classname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $file=str_replace(&lt;span class=&quot;string&quot;&gt;&#39;\\&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,$classname);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $file.=&lt;span class=&quot;string&quot;&gt;&#39;.php&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(file_exists($file))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; ($file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和上面的例子类似，传入_autoload方法中的classname不单单是文件的名字，前面还带着命名空间。我们通过命名空间和磁盘上的路径做个映射得出实际文件的目录，判断是否存在，如果存在的话require&lt;br&gt;通过__autoload我们可以很轻松的实现自动加载，但是a这个方式也是有大量缺点的，比如如果我们使用的方式很复杂的话，函数体内会写的很长，这样就不利于维护。&lt;/p&gt;
&lt;h2 id=&quot;spl-autoload-register&quot;&gt;&lt;a href=&quot;#spl-autoload-register&quot; class=&quot;headerlink&quot; title=&quot;spl_autoload_register&quot;&gt;&lt;/a&gt;spl_autoload_register&lt;/h2&gt;&lt;p&gt;在php5.1.2，引入了一种新的方式，spl_autoload_register函数，这个函数功能很简单，就是注册一个函数,注册的函数就相当于上面的__autoload函数。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Models&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;SomeModel&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spl_autoload_register(&lt;span class=&quot;string&quot;&gt;&#39;func&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$somdel=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SomeModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($classname)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($classname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $file=str_replace(&lt;span class=&quot;string&quot;&gt;&#39;\\&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,$classname);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $file.=&lt;span class=&quot;string&quot;&gt;&#39;.php&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(file_exists($file))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; ($file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过spl_autoload_register我们注册了一个函数，如果使用一个在没有引入的类，会自动调用spl_autoload_register中注册的函数，直到找到要使用的类为止。如果注册了多个函数会依次调用，如果还是找不到所需要的类，就会报错。&lt;br&gt;如果我们调用该函数没有指明参数，将会自动注册默认的实现的spl_autoload().&lt;br&gt;此外还有spl_autoload_unregister()卸载注册的函数，spl_autoload_functions()返回已经注册的函数。&lt;/p&gt;
&lt;h2 id=&quot;Yii2中的自动调用&quot;&gt;&lt;a href=&quot;#Yii2中的自动调用&quot; class=&quot;headerlink&quot; title=&quot;Yii2中的自动调用&quot;&gt;&lt;/a&gt;Yii2中的自动调用&lt;/h2&gt;&lt;p&gt;其实自动加载机制在很多php框架中都很流行，虽然每套框架几乎都有自己的一套规则，大豆大同小异，下面我们看看yii2的自动加载机制。&lt;br&gt;要了解yii2的自动加载机制，我们必须从入口文件了解&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined(&lt;span class=&quot;string&quot;&gt;&#39;YII_DEBUG&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; define(&lt;span class=&quot;string&quot;&gt;&#39;YII_DEBUG&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defined(&lt;span class=&quot;string&quot;&gt;&#39;YII_ENV&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; define(&lt;span class=&quot;string&quot;&gt;&#39;YII_ENV&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;prod&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个是第三方的autoloader&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/../../vendor/autoload.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个是Yii的Autoloader，放在最后面，确保其插入的autoloader会放在最前面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/../../vendor/yiisoft/yii2/Yii.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 后面不应再有autoloader了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/../../common/config/aliases.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$config = yii\helpers\ArrayHelper::merge(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/../../common/config/main.php&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/../../common/config/main-local.php&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/../config/main.php&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/../config/main-local.php&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$application = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; yii\web\Application($config);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$application-&amp;gt;run();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从入口文件中我们看到了require了Yii中的yii.php文件，我们找到这个文件。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/BaseYii.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Yii&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; \&lt;span class=&quot;title&quot;&gt;yii&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;BaseYii&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重点看这个 spl_autoload_register&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spl_autoload_register([&lt;span class=&quot;string&quot;&gt;&#39;Yii&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;autoload&#39;&lt;/span&gt;], &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面的语句读取了一个映射表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Yii::$classMap = &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;&#39;/classes.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Yii::$container = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; yii\di\Container;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们看到了使用了spl_autoload_register注册了一个方法，是在Yii类中的autoload方法。并且获得了一个映射表格，$classMap,映射表中其实就是一个超大号的数组，里面存放着命名空间和类文件路径的对应关系。我们主要看autoload方法中是如何实现的就行：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;autoload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($className)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$classMap[$className])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $classFile = &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$classMap[$className];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($classFile[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] === &lt;span class=&quot;string&quot;&gt;&#39;@&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $classFile = &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::getAlias($classFile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt; (strpos($className, &lt;span class=&quot;string&quot;&gt;&#39;\\&#39;&lt;/span&gt;) !== &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $classFile = &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::getAlias(&lt;span class=&quot;string&quot;&gt;&#39;@&#39;&lt;/span&gt; . str_replace(&lt;span class=&quot;string&quot;&gt;&#39;\\&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $className) . &lt;span class=&quot;string&quot;&gt;&#39;.php&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($classFile === &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; || !is_file($classFile)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;($classFile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (YII_DEBUG &amp;amp;&amp;amp; !class_exists($className, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        !interface_exists($className, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;) &amp;amp;&amp;amp; !trait_exists($className,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnknownClassException(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;Unable to find &#39;$className&#39; in file: $classFile. Namespace missing?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这其中包含了yii的别名机制，如果看不太懂请忽略，总的来说是处理classFile这个变量，也是通过处理，将传过来了的className变量转换成实际文件的路径，然后include一下。这就是yii的自动加载机制，虽然比上面的例子复杂很多，但是原理上是一致。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;PHP是一种脚本语言，每个php文件必须通过require和include打开后才能使用其中的代码，在以前的版本中也就是PHP5之前的版本，我们想使用一个文件必须require活着include，PHP5中引入了自动加载机制来解决这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://noble4cc.me/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://noble4cc.me/tags/PHP/"/>
    
      <category term="autoload" scheme="http://noble4cc.me/tags/autoload/"/>
    
  </entry>
  
  <entry>
    <title>C语言调用Python代码</title>
    <link href="http://noble4cc.me/C-language-call-Python-code/"/>
    <id>http://noble4cc.me/C-language-call-Python-code/</id>
    <published>2016-04-17T06:09:34.000Z</published>
    <updated>2016-04-17T12:53:41.000Z</updated>
    
    <content type="html">&lt;p&gt;我在做Python开发时经常要使用到C写的模块，Python调用C的模块网上很多方法，这里就不再赘述了，本次博文我们就讲讲在C语言中调用Python写好的代码。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Python本身就是C语言写成的（当然现在有很多其他实现方式比如pypy就是Python写的Python，但主流的还是使用CPython），我们平常执行的Python解释器其实就是个shell，也就是个可执行文件，真正的Python解释器是以链接库的形式存在的。如果你是Windows平台那就在你的Python目录下的lib目录的python.dll，如果是在其他平台上也是在你的安装目录下，如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-17%20%E4%B8%8B%E5%8D%883.58.48.png&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中的Python文件就是个链接库，只是没有带扩展名而已。&lt;br&gt;使用C或者C++调用Python脚本本质上也是开启了一个Python解释器，是调用Pyton链接库的形式来实现了，Python的链接库会事先暴露出API来供我们调用。使用使用C调用Python必须引入头文件&lt;code&gt;Python.h&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;常见API&quot;&gt;&lt;a href=&quot;#常见API&quot; class=&quot;headerlink&quot; title=&quot;常见API&quot;&gt;&lt;/a&gt;常见API&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;void Py_Initialize(void)&lt;/strong&gt;&lt;br&gt;初始化Python解释器，如果初始化失败，继续下面的调用会出现各种错误，可惜的是此函数没有返回值来判断是否初始化成功，如果失败会导致致命错误。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int Py_IsInitialized(void)&lt;/strong&gt;&lt;br&gt;检查是否已经进行了初始化，如果返回0，表示没有进行过初始化。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;void Py_Finalize()&lt;/strong&gt;&lt;br&gt;反初始化Python解释器，包括子解释器，调用此函数同时会释放Python解释器所占用的资源。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int PyRun_SimpleString(const char *command)&lt;/strong&gt;&lt;br&gt;实际上是一个宏，执行一段Python代码。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PyObject&lt;em&gt; PyImport_ImportModule(char &lt;/em&gt;name)&lt;/strong&gt;&lt;br&gt;导入一个Python模块，参数name可以是*.py文件的文件名。类似Python内建函数import。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PyObject&lt;em&gt; PyModule_GetDict( PyObject &lt;/em&gt;module)&lt;/strong&gt;&lt;br&gt;相当于Python模块对象的&lt;strong&gt;dict&lt;/strong&gt;属性，得到模块名称空间下的字典对象。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PyObject&lt;em&gt; PyRun_String(const char&lt;/em&gt; str, int start,PyObject&lt;em&gt; globals, PyObject&lt;/em&gt; locals)&lt;/strong&gt;&lt;br&gt;执行一段Python代码。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int PyArg_Parse(PyObject&lt;em&gt; args, char&lt;/em&gt; format, …)&lt;/strong&gt;&lt;br&gt;把Python数据类型解析为C的类型，这样C程序中才可以使用Python里面的数据。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PyObject&lt;em&gt; PyObject_GetAttrString(PyObject &lt;/em&gt;o, char*attr_name)&lt;/strong&gt;&lt;br&gt;返回模块对象o中的attr_name 属性或函数，相当于Python中表达式语句，o.attr_name。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PyObject&lt;em&gt; Py_BuildValue(char&lt;/em&gt; format, …)&lt;/strong&gt;&lt;br&gt;和PyArg_Parse刚好相反，构建一个参数列表，把C类型转换为Python对象，使得Python里面可以使用C类型数据。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PyObject&lt;em&gt; PyEval_CallObject(PyObject&lt;/em&gt; pfunc, PyObject*pargs)&lt;/strong&gt;&lt;br&gt;此函数有两个参数，而且都是Python对象指针，其中pfunc是要调用的Python 函数，一般说来可以使用PyObject_GetAttrString()获得，pargs是函数的参数列表，通常是使用Py_BuildValue()来构建。  &lt;/p&gt;
&lt;p&gt;更多C和Python交互的API请参考 &lt;a href=&quot;https://docs.python.org/2/c-api/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say_hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;先实现一个模块，里面有以上两个函数&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Python.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Py_SetProgramName(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Py_Initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyRun_SimpleString(&lt;span class=&quot;string&quot;&gt;&quot;import sys&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyRun_SimpleString(&lt;span class=&quot;string&quot;&gt;&quot;sys.path.append(&#39;./&#39;)&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyObject* name = PyString_FromString(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyObject* test = PyImport_Import(name);&lt;span class=&quot;comment&quot;&gt;//导入test模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!test)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;import module error&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// //获得模块中的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyObject* say_hello = PyObject_GetAttrString(test, &lt;span class=&quot;string&quot;&gt;&quot;say_hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyObject* add = PyObject_GetAttrString(test, &lt;span class=&quot;string&quot;&gt;&quot;add&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyObject* get_list = PyObject_GetAttrString(test, &lt;span class=&quot;string&quot;&gt;&quot;get_list&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyObject* get_dict = PyObject_GetAttrString(test, &lt;span class=&quot;string&quot;&gt;&quot;get_dict&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// //分别调用模块中的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//打印hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PyEval_CallObject(say_hello,&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//将参数+1，先将C语言的类型转成Python，计算后返回PyObject，再将PyObject转成整形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,PyArg_Parse(PyEval_CallObject(add,Py_BuildValue(&lt;span class=&quot;string&quot;&gt;&quot;i&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)),&lt;span class=&quot;string&quot;&gt;&quot;i&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,PyArg_Parse(PyEval_CallObject(get_list,NULL),&lt;span class=&quot;string&quot;&gt;&quot;i&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Py_Finalize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在在C中进行调用，编译时需要带上链接库，在linux/mac上可以这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc main.c -o main -I/usr/include/python2.7/ -lpython2.7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着就会看到打印的结果。Python作为一种胶水语言可以及其方便的和C做交互，很多人吐槽过Python的效率，其实在需要效率的地方可以使用C写好的模块。PyObject是个结构体类型，它表示Python中的某种类型，也就是说Python中的所有类型在C中都是以PyObject表示的，使用PyObject可以和C中的类型做转换（详细API见官方文档）。&lt;/p&gt;
&lt;p&gt;在C语言中调用Python其实有很多应用，比如实现了WSGI协议的server一般是C或者C++写的，运行写好的app，必须在C语言中调用Python代码，比较有代表性的比如Apache中的mod_wsgi，还有性能比较强悍的uwsgi也是一个代表。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我在做Python开发时经常要使用到C写的模块，Python调用C的模块网上很多方法，这里就不再赘述了，本次博文我们就讲讲在C语言中调用Python写好的代码。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://noble4cc.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noble4cc.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>什么是WSGI</title>
    <link href="http://noble4cc.me/what-is-wsgi/"/>
    <id>http://noble4cc.me/what-is-wsgi/</id>
    <published>2016-04-16T09:22:26.000Z</published>
    <updated>2016-04-17T06:05:18.000Z</updated>
    
    <content type="html">&lt;p&gt;WSGI是一种协议，描述了web server如何与application交互。该规范的具体描述在&lt;br&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PEP 3333(可能要翻墙)&lt;/a&gt;。当然这样的说法都不够通俗，在了解WSGI之前最好要了解一下CGI。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CGI&quot;&gt;&lt;a href=&quot;#CGI&quot; class=&quot;headerlink&quot; title=&quot;CGI&quot;&gt;&lt;/a&gt;CGI&lt;/h2&gt;&lt;p&gt;CGI是上古时代存在的东西，他是一种协议，规定web服务器和web应用之间通信的方式。这是最早编写web应用的一种方式，在像php这种服务端脚本出现之前，工程师编写网站就是通过这种原始的方式。再说通俗点，CGI是种协议，什么叫做协议，其实都是约定俗称的东西，遵循它就能得到正确的结果，就像平时说英语，为什么要这样说，其实是大家都这么说，没有为什么，如果换了一种说法，别人就听不懂了。CGI主要作用是什么能，它规定了服务器和web应用之间怎样交流信息。比如你在向服务器请求资源（比如在地址栏输入URL，就在向服务器请求HTML页面），服务器一般有程序接受请求（常见的比如Apache、ngnix）然后将接受到的信息（资源路径、请求的方法）传送给实现了CGI协议的程序（可以说是CGI程序），程序根据信息生成对应的资源（一般是HTML）返回给服务器，服务器再将资源返回给客户端，这就完成了一次通信，当然这其中的过程并没有描述的这样简单，涉及到HTTP请参考我的另一篇博文&lt;a href=&quot;http://noble4cc.me/HTTP-agreement-to-explain/&quot;&gt;Http协议讲解&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;其实WSGI和CGI看起来类似，但本质上不是一种东西&lt;/code&gt;,具体为什么下面再讲。WSGI我专门为Python语言而生的，当然其他语言（比如Python和PHP）做的app只要遵循这个标准也是可以的。类似于CGI的变种协议还有现在使用比较多的fastCGI，这是CGI的加强版本。CGI每次处理一个请求都会fork，然后执行。这样会造成效率低下的问题（创建进程是需要时间），fastCGI是预先创建好一堆进程，有请求直接拿创建好的进程去处理。处理完后放回进程池，这样会大大提高处理的效率。&lt;/p&gt;
&lt;h2 id=&quot;WSGI内容&quot;&gt;&lt;a href=&quot;#WSGI内容&quot; class=&quot;headerlink&quot; title=&quot;WSGI内容&quot;&gt;&lt;/a&gt;WSGI内容&lt;/h2&gt;&lt;p&gt;WSGI同样是一种规范，同样也是定义server和application之间的规范，不同的是CGI定义的是server和app进程间通信的方式，比如使用标准输入输出和写入进程的环境变量，fastCGI使用TCP和管道，而WSGI是针对API的，也就是接口参数的标准化。WSGI主要实现三个组件server、middleware、app。&lt;br&gt;&lt;strong&gt;server:&lt;/strong&gt;&lt;br&gt;实现了WSGI的server，处理请求时会调用编写好的web应用，web应用会通过配置的形式注册到server，server会去app中寻找一个application的可调用对象（也就是一个函数或者实现了__call__的类）。调用这个可调用对象，并传入两个参数&lt;code&gt;environ、start_response&lt;/code&gt;,这个可调用对象是app的唯一入口，所有的请求都通过这个入口进行处理。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     state = &lt;span class=&quot;string&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#返回的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     headers = [(&lt;span class=&quot;string&quot;&gt;&#39;Content-type&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;)]&lt;span class=&quot;comment&quot;&gt;#返回的报文头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     start_response(state, headers)&lt;span class=&quot;comment&quot;&gt;#返回前调用这个会掉函数，传递必须的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;#返回一个可迭代对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;environ是个字典，保存着请求传过来的各种参数，start_response其实是个callback，当返回生成的响应之前必须先调用start_response，传入状态和报文头，也只调用一次，这个调用时通知server我要返回报文了&lt;br&gt;我们可以使用Python标准库自带的wsgiref工具包实现一个wsgi server&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# encoding=utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; wsgiref.simple_server &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; make_server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(environ, start_response)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state = &lt;span class=&quot;string&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 返回的状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers = [(&lt;span class=&quot;string&quot;&gt;&#39;Content-type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;)]  &lt;span class=&quot;comment&quot;&gt;# 返回的报文头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start_response(state, headers)  &lt;span class=&quot;comment&quot;&gt;# 返回前调用这个会掉函数，传递必须的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;h1&amp;gt;this is body&amp;lt;/h1&amp;gt;&#39;&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;# 返回一个可迭代对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server=make_server(&lt;span class=&quot;string&quot;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;,application)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.serve_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用make_server创建一个server，将application注册到server，然后执行服务，在浏览器输入地址和绑定的端口，可以看到返回的页面&lt;br&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-17%20%E4%B8%8A%E5%8D%8812.23.45.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;middleware:&lt;/strong&gt;&lt;br&gt;middleware翻译过来就是中间件的意思，他其实是server和application之间的桥梁，在wsgi协议中，server不是直接和application直接通信的，server是通过中间件间接调用application的。&lt;br&gt;也就是说server调用server的入口也就是上面提到的application函数，然后中间件经过一堆处理，然后调用app的application，app返回产生的相应，中间件在经过一堆处理返回给server。这样做的好处我们可以通过中间件做一些处理，比如说验证和过滤，类似于Java中servlet的filter。&lt;br&gt;&lt;strong&gt;app:&lt;/strong&gt;&lt;br&gt;前面已经讲过app了，这里说明一下，上面的例子这是一个简单的示例，实际生成响应的过程中是比较复杂的，这里会根据不同的框架做出不同的处理，常见的实现了WSGI协议的有django、flask、web.py….总之搞过python web的同学会发现Python的web框架从轻量级到重量级都都存在大量可选的。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;说道做python web的话，不得不提到各种框架，如之前提到过的django和flask、web.py，其实还有很多很多web框架，多到我也不知道有多少种，他们共同点都是实现了WSGI协议的，也就是说无论内部如何处理，入口都是一样的，这就让让我们部署web应用变得容易（虽然不如php方便，php的云主机满天飞）。WSGI也是各种web框架泛滥的原因，可以说WSGI是个伟大的协议。&lt;br&gt;现在主流的部署方式是通过常见的http server如Apache、nigix来实现的，这些服务器没有直接实现WSGI协议，Apache是使用mod_wsgi插件实现了WSGI的，nginx则只是做个代理，分发HTTP请求，将请求发送到实现了WSGI的server如uwsgi然后再从实现了WSGI的server中获得相应返还给client。总之Python应用的部署还是很灵活的，实现了WSGI的server也有很多，怎样使用要看实际情况了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;WSGI是一种协议，描述了web server如何与application交互。该规范的具体描述在&lt;br&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/&quot;&gt;PEP 3333(可能要翻墙)&lt;/a&gt;。当然这样的说法都不够通俗，在了解WSGI之前最好要了解一下CGI。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://noble4cc.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noble4cc.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux的IO多路复用</title>
    <link href="http://noble4cc.me/IO-Linux-multiplexing/"/>
    <id>http://noble4cc.me/IO-Linux-multiplexing/</id>
    <published>2016-02-18T14:16:41.000Z</published>
    <updated>2016-05-08T14:46:28.000Z</updated>
    
    <content type="html">&lt;p&gt;I/O，是服务端编程中比较常讨论的话题。也是比较基本的问题，了解I/O多路复用能让服务器承载更多的链接，更加有效的利用资源。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;socket&quot;&gt;&lt;a href=&quot;#socket&quot; class=&quot;headerlink&quot; title=&quot;socket&quot;&gt;&lt;/a&gt;socket&lt;/h3&gt;&lt;p&gt;socket中文名字是套接字，其实本质上是一种api，提供主要实现了进程间的通讯，他最大的特点是可以跨主机，主要用来实现网络间的通信。现在的socket主要是指伯克利socket，我们平常实现一个路网通讯TCP或者UDP的链接就是使用socket来实现的。socket主要参数绑定主机名和端口号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/420px-InternetSocketBasicDiagram_zhtw.png&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;文件描述符&quot;&gt;&lt;a href=&quot;#文件描述符&quot; class=&quot;headerlink&quot; title=&quot;文件描述符&quot;&gt;&lt;/a&gt;文件描述符&lt;/h3&gt;&lt;p&gt;在类Unix操作系统中的设计哲学是&lt;code&gt;一切都是文件&lt;/code&gt;，也就是说普通的文件，目录、字符设备、块设备、 套接字等在Unix/Linux中都是以文件被对待；它们虽然类型不同，但是对其提供统一的访问方式，也就是说我们都可以通过read和write进行相关的操作。当你要访问一个文件的时候，无论是创建一个socket还是open一个普通文件，都会返回一个文件标示，也就是我们平常说的fd。文件描述符其实是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。常见的文件描述符0、1、2分别对应着标准输入、标准输出、标准错误。其实光这样说很多人其实不明白操作系统到底是怎样管理文件的，其实如果再底层一点可能就要说到linux的磁盘管理了（请看另外一篇博文&lt;a href=&quot;http://noble4cc.me/Linux-note--Linux-disk-management/&quot;&gt;《linux磁盘管理》&lt;/a&gt;）。其实对于打开文件的管理是操作系统提供的（操作系统的主要功能之一就是提供文件管理），他会在自己的内部维护一张表，表内存放着打开文件的信息，分别存放着文件当前的偏移量、状态指向inode的指针，操作系统也会维护inode一张表（inode这里不再赘述），文件描述符是进程级别的，也就是说不通进程可能存在相同的描述符指向不通的文件或者相同的文件。一图胜千言：&lt;br&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/fd-inode-diagram.png&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;内核地址用户地址&quot;&gt;&lt;a href=&quot;#内核地址用户地址&quot; class=&quot;headerlink&quot; title=&quot;内核地址用户地址&quot;&gt;&lt;/a&gt;内核地址用户地址&lt;/h3&gt;&lt;p&gt;简单来讲内存是被划分成两部分的，系统内存和用户内存。这样划分的原因主要是用户出于安全的考虑。系统的核心软件需要更高的权限。用户空间和系统空间的权限不同，普通用户的程序不能直接操作内核空间。还有cpu的运行状态也分内核态和用户态，两者简单来说也是权限的不同，内核态可以有更高的权限访问地址内核空间。让cpu从用户态陷入内核态的机制叫做系统调用。&lt;/p&gt;
&lt;h3 id=&quot;进程切换&quot;&gt;&lt;a href=&quot;#进程切换&quot; class=&quot;headerlink&quot; title=&quot;进程切换&quot;&gt;&lt;/a&gt;进程切换&lt;/h3&gt;&lt;p&gt;一般cpu只有几个核心（以前只有一个核心），现在的操作系统都运行着不止一个进程，存在很多的进程并发执行。为了控制进程，操作系统会改变进程的状态，比如从执行态变为阻塞态。linux进行进程的调度需要做以下操作：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存处理机上下文，包括程序计数器和其他寄存器。&lt;/li&gt;
&lt;li&gt;更新PCB信息。&lt;/li&gt;
&lt;li&gt;把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。&lt;/li&gt;
&lt;li&gt;选择另一个进程执行，并更新其PCB。&lt;/li&gt;
&lt;li&gt;更新内存管理的数据结构。&lt;/li&gt;
&lt;li&gt;恢复处理机上下文。&lt;br&gt;写上面的东西是想说说明cpu的进程调度是相当耗时的，频繁的进程切换会造成极性能的严重下降。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h3&gt;&lt;p&gt;缓存I/O又被称作标准I/O，大多数文件系统的默认I/O操作都是缓存I/O。在Linux的缓存I/O机制中，数据先从磁盘复制到内核空间的缓冲区，然后从内核空间缓冲区复制到应用程序的地址空间。&lt;br&gt;缓存I/O的优点：在一定程度上分离了内核空间和用户空间，保护系统本身的运行安全，另外可以减少读盘的次数，从而提高性能。&lt;br&gt;缓存I/O的缺点：数据在传输过程中需要在应用程序地址空间和缓存之间进行多次数据拷贝操作，这些数据拷贝操作所带来的CPU以及内存开销是非常大的。&lt;br&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/image005.jpg&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;阻塞&quot;&gt;&lt;a href=&quot;#阻塞&quot; class=&quot;headerlink&quot; title=&quot;阻塞&quot;&gt;&lt;/a&gt;阻塞&lt;/h3&gt;&lt;p&gt;其实阻塞在我们日常编程中都是非常常见的，比如我们写了一个socket，等待对方连接上，这就是是阻塞的过程.阻塞就是当进程遇到特殊情况，如IO、延迟、挂起等情况，程序不再执行，交出CPU的控制权。进程从运行状态进入阻塞状态。知道消除阻塞，进程从阻塞状态进入就绪状态。&lt;code&gt;阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;同步异步&quot;&gt;&lt;a href=&quot;#同步异步&quot; class=&quot;headerlink&quot; title=&quot;同步异步&quot;&gt;&lt;/a&gt;同步异步&lt;/h3&gt;&lt;p&gt;同步是指当调用一段指令等待指令返回才结束调用，异步是一个调用后立即返回。&lt;br&gt;&lt;code&gt;同步和异步关注的是消息通信机制&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;I-O模型&quot;&gt;&lt;a href=&quot;#I-O模型&quot; class=&quot;headerlink&quot; title=&quot;I/O模型&quot;&gt;&lt;/a&gt;I/O模型&lt;/h2&gt;&lt;p&gt;在linux下一共有5种IO模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞IO&lt;/li&gt;
&lt;li&gt;非阻塞IO&lt;/li&gt;
&lt;li&gt;IO多路复用&lt;/li&gt;
&lt;li&gt;信号驱动 IO&lt;/li&gt;
&lt;li&gt;异步IO  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于信号驱动IO并不常用，所以我们这里就不赘述。&lt;br&gt;&lt;strong&gt;阻塞IO&lt;/strong&gt;&lt;br&gt;阻塞IO是最简单艹模型，也是最常用的，也就是当进行系统调用，向系统索要数据时，一直等待，内进行了第一个阶段，准备要获得数据。（&lt;code&gt;什么叫做准备数据：其实我们建立了一个连接，并不一定就马上获得数据，有可能数据有延时，也可能数据发送过来没不完整，就像一条水管，接通了就不一定有水过来，还要等待一段时间。对于复杂的网络环境更是如此&lt;/code&gt;），等待数据别拷贝到内核的缓冲区，直到数据准备完成，进入第二阶段，将数据写入用户空间，完成IO&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/1593755892-55c466c2b5fc5_articlex.png&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非阻塞IO&lt;/strong&gt;&lt;br&gt;非阻塞IO简单来讲是数据准备发出系统调用后如果数据没准备好久就返回个错误，不会一直阻塞，然后继续请求，直到返回数据为止&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/1505222224-55c466dda9803_articlex.png&quot; alt=&quot;image description&quot;&gt;&lt;br&gt;&lt;strong&gt;IO多路复用&lt;/strong&gt;&lt;br&gt;IO多路复用不光能处理一个请求，还能处理一组请求。通过某种机制，当某个连接准备好数据后，内核通知进程进行处理。IO多路复用解决的根本问题是单个进程如何高效率的处理多个IO请求，也就是如果高效率的读写多个IO文件。&lt;br&gt;IO多路复用还有个名字叫做事件驱动。Linux下住要是通过select、poll和epoll三种系统调用完成是，在其他平台上也有相应的系统调用，如BSD的kqueue和windows的IOPC。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/1903235121-55c466eb17665_articlex.png&quot; alt=&quot;image description&quot;&gt;&lt;br&gt;上图用最简单的select进行演示说明：当调用select时，进程阻塞，直到被监控的链接有数据准备好的，返回，进行IO操作，数据被写入用户空间。&lt;br&gt;&lt;strong&gt;异步IO&lt;/strong&gt;&lt;br&gt;异步IO就是将当进行系统调用时不等数据返回，直接返回，当数据准备好后，内核直接将数据写入用户空间，然后通知用户进程，数据写好了。&lt;br&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/1311869885-55c466fac00ba_articlex.png&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;select-poll&quot;&gt;&lt;a href=&quot;#select-poll&quot; class=&quot;headerlink&quot; title=&quot;select/poll&quot;&gt;&lt;/a&gt;select/poll&lt;/h2&gt;&lt;p&gt;select是最早的IO复用方式，当时机器性能低下，，而且也没有现在的高并发的需求，所以，select被设计的比较简单。主要原理上面说的很清楚。现在但是由于历史遗留问题，select有以下缺点：&lt;code&gt;支持的最大连接数是有限的最大1024，当然你可以修改然后重新编译内核。select只是返回状态通知有数据准备好了，并没有通知哪个准备好，所以，每当数据准备好后，用户线程还有轮询所有的链接，找到目标链接，当连接的数量很大时会造成效率的低下。而且当每次调用select的时候，会将链接的集合从用户数据空间拷贝到内核数据空间，当集合很大时也会造成性能问题。&lt;/code&gt;&lt;br&gt;poll虽然在api上改变了，但是基本原理和select是相同的，只是去掉了连接数1024的上限。select存在的缺点并没有完全解决。&lt;/p&gt;
&lt;h2 id=&quot;epoll&quot;&gt;&lt;a href=&quot;#epoll&quot; class=&quot;headerlink&quot; title=&quot;epoll&quot;&gt;&lt;/a&gt;epoll&lt;/h2&gt;&lt;p&gt;epoll是随着linux2.6发布，带来的全新的多路复用解决方式，直接代理性能革命性的提升。不同于前面的select和poll，epoll不光通知你有数据准备好了，还告诉你那个文件描述符准备好了数据。也就是说不需要在做轮训操作了。epoll的时间复杂度O(1) ，select和poll的时间复杂度O(n).  &lt;/p&gt;
&lt;p&gt;epoll 有两种工作方式：&lt;br&gt;&lt;strong&gt;LT&lt;/strong&gt;（level triggered）是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。传统的select/poll都是这种模型的代表。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ET&lt;/strong&gt; （edge-triggered）是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了（比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作（从而导致它再次变成未就绪），内核不会发送更多的通知（onlyonce），不过在TCP协议中，ET模式的加速效用仍需要更多的benchmark确认。  &lt;/p&gt;
&lt;h2 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;select&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; select&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; Queue &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#AF_INET指定使用IPv4协议，如果要用更先进的IPv6，就指定为AF_INET6。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#SOCK_STREAM指定使用面向流的TCP协议，如果要使用面向数据包的UCP协议，就指定SOCK_DGRAM。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.setblocking(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#设置监听的ip和port&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_address = (&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1234&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.bind(server_address)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#设置backlog为5，client向server发起connect，server accept后建立长连接，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#backlog指定排队等待server accept的连接数量，超过这个数量，server将拒绝连接。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#注册在socket上的读事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inputs = [server]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#注册在socket上的写事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outputs = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#注册在socket上的异常事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exceptions = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#每个socket有一个发送消息的队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg_queues = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;server is listening on %s:%s.&quot;&lt;/span&gt; % server_address&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; inputs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#第四个参数是timeout，可选，表示n秒内没有任何事件通知，就执行下面代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readable, writable, exceptional = select.select(inputs, outputs, exceptions)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; readable:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#client向server发起connect也是读事件，server accept后产生socket加入读队列中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; server:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            conn, addr = sock.accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            conn.setblocking(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            inputs.append(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            msg_queues[conn] = Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;server accepts a conn.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#读取client发过来的数据，最多读取1k byte。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data = sock.recv(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#将收到的数据返回给client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                msg_queues[sock].put(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; outputs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;#下次select的时候会触发写事件通知，写和读事件不太一样，前者是可写就会触发事件，并不一定要真的去写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    outputs.append(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;#client传过来的消息为空，说明已断开连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;server closes a conn.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; outputs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    outputs.remove(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                inputs.remove(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; writable:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; msg_queues[sock].empty():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.send(msg_queues[sock].get_nowait())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; msg_queues[sock].empty():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            outputs.remove(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; exceptional:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inputs.remove(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; outputs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            outputs.remove(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;poll&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; select&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.setblocking(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_address = (&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1234&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.bind(server_address)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;server is listening on %s port %s&#39;&lt;/span&gt; % server_address&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg_queues = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeout = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#POLLIN: There is data to read&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#POLLPRI: There is urgent data to read&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#POLLOUT: Ready for output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#POLLERR: Error condition of some sort&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#POLLHUP: Hung up&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#POLLNVAL: Invalid request: descriptor not open&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;READ_ONLY = select.POLLIN | select.POLLPRI | select.POLLHUP | select.POLLERR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;READ_WRITE = READ_ONLY | select.POLLOUT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;poller = select.poll()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#注册需要监听的事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;poller.register(server, READ_ONLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#文件描述符和socket映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fd_to_socket = &amp;#123; server.fileno(): server&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    events = poller.poll(timeout)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; fd, flag &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; events:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sock = fd_to_socket[fd]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; flag &amp;amp; (select.POLLIN | select.POLLPRI):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; server:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                conn, client_address = sock.accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                conn.setblocking(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fd_to_socket[conn.fileno()] = conn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                poller.register(conn, READ_ONLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                msg_queues[conn] = Queue.Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                data = sock.recv(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    msg_queues[sock].put(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    poller.modify(sock, READ_WRITE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    poller.unregister(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; flag &amp;amp; select.POLLHUP:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            poller.unregister(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; flag &amp;amp; select.POLLOUT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; msg_queues[sock].empty():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                msg = msg_queues[sock].get_nowait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sock.send(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                poller.modify(sock, READ_ONLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; flag &amp;amp; select.POLLERR:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            poller.unregister(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;epoll&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; select&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.setblocking(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_address = (&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1234&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.bind(server_address)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;server is listening on %s port %s&#39;&lt;/span&gt; % server_address&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg_queues = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeout = &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;READ_ONLY = select.EPOLLIN | select.EPOLLPRI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;READ_WRITE = READ_ONLY | select.EPOLLOUT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;epoll = select.epoll()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#注册需要监听的事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;epoll.register(server, READ_ONLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#文件描述符和socket映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fd_to_socket = &amp;#123; server.fileno(): server&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    events = epoll.poll(timeout)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; fd, flag &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; events:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sock = fd_to_socket[fd]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; flag &amp;amp; READ_ONLY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; server:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                conn, client_address = sock.accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                conn.setblocking(&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fd_to_socket[conn.fileno()] = conn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                epoll.register(conn, READ_ONLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                msg_queues[conn] = Queue.Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                data = sock.recv(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    msg_queues[sock].put(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    epoll.modify(sock, READ_WRITE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    epoll.unregister(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; flag &amp;amp; select.EPOLLHUP:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            epoll.unregister(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; flag &amp;amp; select.EPOLLOUT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; msg_queues[sock].empty():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                msg = msg_queues[sock].get_nowait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sock.send(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                epoll.modify(sock, READ_ONLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; flag &amp;amp; select.EPOLLERR:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            epoll.unregister(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; msg_queues[sock]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I/O，是服务端编程中比较常讨论的话题。也是比较基本的问题，了解I/O多路复用能让服务器承载更多的链接，更加有效的利用资源。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python2和Python3的区别总结</title>
    <link href="http://noble4cc.me/The-difference-between-python2-and-python3/"/>
    <id>http://noble4cc.me/The-difference-between-python2-and-python3/</id>
    <published>2016-01-16T08:40:00.000Z</published>
    <updated>2016-04-16T10:21:53.000Z</updated>
    
    <content type="html">&lt;p&gt;许多初学Python的同学总是在问一个问题，是该学习Python2还是该学习Python3。许多对这个问题的回答经常是：仅仅学习你就喜欢的版本之后再找出之间的不同就可以了。&lt;br&gt;但是如果你开发一个新的项目该如何选择版本呢？只要Python2和Python都支持你所需要的类库，没有什么正确和错误的。然而，弄清两者之间的不同，让你在写代码当时避免一些深坑是非常值得的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__future__ module  &lt;/li&gt;
&lt;li&gt;The print 方法  &lt;/li&gt;
&lt;li&gt;Integer 分割  &lt;/li&gt;
&lt;li&gt;Unicode  &lt;/li&gt;
&lt;li&gt;xrange  &lt;/li&gt;
&lt;li&gt;抛出异常&lt;/li&gt;
&lt;li&gt;捕获异常&lt;/li&gt;
&lt;li&gt;next() 函数和 .next() 方法  &lt;/li&gt;
&lt;li&gt;For-loop variables and the global namespace leak  &lt;/li&gt;
&lt;li&gt;Comparing unorderable types  &lt;/li&gt;
&lt;li&gt;Parsing user inputs via input()  &lt;/li&gt;
&lt;li&gt;返回可迭代的对象以代替列表  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;The-future-module&quot;&gt;&lt;a href=&quot;#The-future-module&quot; class=&quot;headerlink&quot; title=&quot;The __future__ module&quot;&gt;&lt;/a&gt;The __future__ module&lt;/h4&gt;&lt;p&gt;Python3使用一些与Python2不兼容的关键字或特性，可以使用Python2的内建__future__模块实现，如果你计划在你的代码中使用Python3的特性，可以同过导入__future__实现。例如如果你想在Python2中使用Python3中的 integer division特性，可以这样使用：  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; __future__ &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; division&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多关于&lt;strong&gt;feture&lt;/strong&gt;能导入的特性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;feature&lt;/th&gt;
&lt;th&gt;optional in&lt;/th&gt;
&lt;th&gt;mandatory in&lt;/th&gt;
&lt;th&gt;effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nested_scopes&lt;/td&gt;
&lt;td&gt;2.1.0b1&lt;/td&gt;
&lt;td&gt;2.2&lt;/td&gt;
&lt;td&gt;PEP 227: Statically Nested Scopes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;generators&lt;/td&gt;
&lt;td&gt;2.2.0a1&lt;/td&gt;
&lt;td&gt;2.3&lt;/td&gt;
&lt;td&gt;PEP 255: Simple Generators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;division&lt;/td&gt;
&lt;td&gt;2.2.0a2&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;PEP 238: Changing the Division Operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;absolute_import&lt;/td&gt;
&lt;td&gt;2.5.0a1&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;PEP 328: Imports: Multi-Line and Absolute/Relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;with_statement&lt;/td&gt;
&lt;td&gt;2.5.0a1&lt;/td&gt;
&lt;td&gt;2.6&lt;/td&gt;
&lt;td&gt;PEP 343: The “with” Statement&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print_function&lt;/td&gt;
&lt;td&gt;2.6.0a2&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;PEP 3105: Make print a function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unicode_literals&lt;/td&gt;
&lt;td&gt;2.6.0a2&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;PEP 3112: Bytes literals in Python 3000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;print方法&quot;&gt;&lt;a href=&quot;#print方法&quot; class=&quot;headerlink&quot; title=&quot;print方法&quot;&gt;&lt;/a&gt;print方法&lt;/h4&gt;&lt;p&gt;print方法在Python中的改变应该是最广为人知的了。在Python2中如果使用print方法，我们可以添加括号print(‘info’)或者不添加括号 print ‘info’.但是在Python3&lt;br&gt;中必须添加括号，不添加括号的话会产生语法错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello, World!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Hello, World!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;, ; &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;print more text on the same line&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; more text on the same line&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Hello, World!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;some text,&quot;&lt;/span&gt;, end=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39; print more text on the same line&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 3.4.1&lt;br&gt;Hello, World!&lt;br&gt;some text, print more text on the same line  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello, World!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello, World!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SyntaxError: invalid syntax&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;print在Python2中是一个statement，就是水哦在语法结构中就是这样的，和while，for是一样的。但是如果你打印多个元素的话，使用print()会包装成一个元组，print不会。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 2.7.6&lt;br&gt;(‘a’, ‘b’)&lt;br&gt;a b  &lt;/p&gt;
&lt;p&gt;####Integer division&lt;br&gt;这是一个非常危险的变化，因为在Python2中整数之间的除法是整除，而在Python3中会出现小数字。如果在Pytho3中使用整除必须使用两个除号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;3 / 2 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;3 // 2 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; // &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;3 / 2.0 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;3 // 2.0 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; // &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 2.7.6&lt;br&gt;3 / 2 = 1&lt;br&gt;3 // 2 = 1&lt;br&gt;3 / 2.0 = 1.5&lt;br&gt;3 // 2.0 = 1.0 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;3 / 2 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;3 // 2 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; // &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;3 / 2.0 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;3 // 2.0 =&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; // &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 3.4.1&lt;br&gt;3 / 2 = 1.5&lt;br&gt;3 // 2 = 1&lt;br&gt;3 / 2.0 = 1.5&lt;br&gt;3 // 2.0 = 1.0  &lt;/p&gt;
&lt;h4 id=&quot;Unicode&quot;&gt;&lt;a href=&quot;#Unicode&quot; class=&quot;headerlink&quot; title=&quot;Unicode&quot;&gt;&lt;/a&gt;Unicode&lt;/h4&gt;&lt;p&gt;在Python2中有ASCII string类型，有unicode string类型两种，但是没有用byte类型&lt;br&gt;，在Python中有了unicodestring类型和两种byte类型：byte和bytearrays&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; type(unicode(&lt;span class=&quot;string&quot;&gt;&#39;this is like a python3 str type&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;lt;type &lt;span class=&quot;string&quot;&gt;&#39;unicode&#39;&lt;/span&gt;&amp;amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; type(&lt;span class=&quot;string&quot;&gt;b&#39;byte type does not exist&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;lt;type &lt;span class=&quot;string&quot;&gt;&#39;str&#39;&lt;/span&gt;&amp;amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;they are really&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;b&#39; the same&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;they are really the same&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; type(bytearray(&lt;span class=&quot;string&quot;&gt;b&#39;bytearray oddly does exist though&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;lt;type &lt;span class=&quot;string&quot;&gt;&#39;bytearray&#39;&lt;/span&gt;&amp;amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&#39;Python&#39;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&#39;strings are now utf-8 \u03BCnico\u0394é!&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python 3.4.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;strings are now utf-8 μnicoΔé!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&#39;Python&#39;, python_version(), end=&quot;&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&#39; has&#39;, type(b&#39; bytes for storing data&#39;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python 3.4.1 has &amp;amp;lt;class &#39;bytes&#39;&amp;amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&#39;and Python&#39;, python_version(), end=&quot;&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&#39; also has&#39;, type(bytearray(b&#39;bytearrays&#39;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;and Python 3.4.1 also has &amp;amp;lt;class &#39;bytearray&#39;&amp;amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#39;note that we cannot add a string&#39; + b&#39;bytes for data&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeError                                 Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; in ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;amp;gt; 1 &#39;note that we cannot add a string&#39; + b&#39;bytes for data&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeError: Can&#39;t convert &#39;bytes&#39; object to str implicitly&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#####xrange&lt;br&gt;在Python2中，xrang()会产生一个可迭代的对象，类似于generator，为什么使用可迭代对象呢，因为当使用for循环进行迭代时，rang方法返回的是一个list，如果数据量过大，list对象都会载入内存，会浪费大量的资源。使用可迭代对象不会产生这个现象。&lt;br&gt;在Python3中rang默认就是返回可迭代对象，所以xrang在Python3中被取消了。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; timeit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_range&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_xrange&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;\ntiming range()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%timeit test_range(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;\n\ntiming xrange()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%timeit test_xrange(n)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 2.7.6&lt;br&gt;timing range()&lt;br&gt;1000 loops, best of 3: 433 µs per loop&lt;br&gt;timing xrange()&lt;br&gt;1000 loops, best of 3: 350 µs per loop  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;\ntiming range()&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%timeit test_range(n)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 3.4.1&lt;br&gt;timing range()&lt;br&gt;1000 loops, best of 3: 520 µs per loop&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(xrange(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NameError                                 Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; print(xrange(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NameError: name &lt;span class=&quot;string&quot;&gt;&#39;xrange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; defined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不少人指出Python3的rang方法比Python2的xrang方法要慢，但是应该指出的是：相同的Python实现，2是要比3要快&lt;/p&gt;
&lt;p&gt;####抛出异常&lt;br&gt;在Python2中如果你raise一个异常，可以不适用括号，但是在Python3不适用括号的话，会提示语法异常&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError, &lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IOError                                   Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError, &lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IOError: file error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError(&lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IOError                                   Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError(&lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IOError: file error&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError, &lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError, &lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SyntaxError: invalid syntax&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Python中正确的抛出异常的方法：  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError(&lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSError                                   Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError(&lt;span class=&quot;string&quot;&gt;&quot;file error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSError: file error&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####捕获异常&lt;br&gt;在Python3抛出异常我们做了一下改变，必须使用 as 关键字&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let_us_cause_a_NameError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; NameError, err:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; err, &lt;span class=&quot;string&quot;&gt;&#39;--&amp;amp;gt; our error message&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name &lt;span class=&quot;string&quot;&gt;&#39;let_us_cause_a_NameError&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; defined --&amp;amp;gt; our error message&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let_us_cause_a_NameError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; NameError &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; err:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(err, &lt;span class=&quot;string&quot;&gt;&#39;--&amp;amp;gt; our error message&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name &lt;span class=&quot;string&quot;&gt;&#39;let_us_cause_a_NameError&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; defined --&amp;amp;gt; our error message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;####next() 函数和 .next() 方法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于在Python2中next()函数和.next()方法都是常用的，所以对于语法上的改变是值得我们关注的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对于可迭代对象（如元组和列表），在Python2中可以使用next()和.next，在Python3中使用.next会产生AttributeError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**PYTHON &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_generator = (letter &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; letter &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;abcdefg&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next(my_generator)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_generator.next()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 2.7.6&lt;br&gt;‘b’  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_generator = (letter &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; letter &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;abcdefg&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next(my_generator)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 3.4.1&lt;br&gt;‘a’&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;my_generator.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AttributeError                            Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; my_generator.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AttributeError: &lt;span class=&quot;string&quot;&gt;&#39;generator&#39;&lt;/span&gt; object has no attribute &lt;span class=&quot;string&quot;&gt;&#39;next&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;####for循环变量和全局命名空间的泄露&lt;/p&gt;
&lt;p&gt;好消息就是在Python3的for循环变量不在泄露在全局名称空间内了。&lt;br&gt;可以理解为List在一不支持[… for var in item1, item2, …].语法了，而是被[… for var in (item1, item2, …)]代替了。就是在语法层面上实现了一个list的生成器，使得变量不在泄露到全局空间中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;before: i =&#39;&lt;/span&gt;, i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;comprehension: &#39;&lt;/span&gt;, [i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;after: i =&#39;&lt;/span&gt;, i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 2.7.6&lt;br&gt;before: i = 1&lt;br&gt;comprehension:  [0, 1, 2, 3, 4]&lt;br&gt;after: i = 4&lt;br&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;before: i =&#39;&lt;/span&gt;, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;comprehension:&#39;&lt;/span&gt;, [i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;after: i =&#39;&lt;/span&gt;, i)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 3.4.1&lt;br&gt;before: i = 1&lt;br&gt;comprehension: [0, 1, 2, 3, 4]&lt;br&gt;after: i = 1  &lt;/p&gt;
&lt;p&gt;####比较无序类型&lt;/p&gt;
&lt;p&gt;另外一个重大的改变是比较无序类型将不再有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;[1, 2] &amp;gt; &#39;foo&#39; = &quot;&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] &amp;lt; &lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;(1, 2) &amp;gt; &#39;foo&#39; = &quot;&lt;/span&gt;, (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;lt; &lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;[1, 2] &amp;gt; (1, 2) = &quot;&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] &amp;lt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 2.7.6&lt;br&gt;[1, 2] &amp;gt; ‘foo’ =  False&lt;br&gt;(1, 2) &amp;gt; ‘foo’ =  True&lt;br&gt;[1, 2] &amp;gt; (1, 2) =  False  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&#39;Python&#39;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&quot;[1, 2] &amp;gt; &#39;foo&#39; = &quot;, [1, 2] &amp;lt; &#39;foo&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&quot;(1, 2) &amp;gt; &#39;foo&#39; = &quot;, (1, 2) &amp;lt; &#39;foo&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&quot;[1, 2] &amp;gt; (1, 2) = &quot;, [1, 2] &amp;lt; (1, 2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python 3.4.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeError                                 Traceback (most recent call last)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; in ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      1 print(&#39;Python&#39;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&amp;gt; 2 print(&quot;[1, 2] &amp;gt; &#39;foo&#39; = &quot;, [1, 2] &amp;lt; &#39;foo&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      3 print(&quot;(1, 2) &amp;gt; &#39;foo&#39; = &quot;, (1, 2) &amp;lt; &#39;foo&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      4 print(&quot;[1, 2] &amp;gt; (1, 2) = &quot;, [1, 2] &amp;lt; (1, 2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeError: unorderable types: list() &amp;gt; str()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####input函数的修改&lt;/p&gt;
&lt;p&gt;在Python3中input函数被修改成了输入的只能是字符串。在Pytho2中如果使用input可能会输入字符串之外的类型，要想只输入字符串必须使用raw_input代替&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[GCC &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; (Apple Inc. build &lt;span class=&quot;number&quot;&gt;5493&lt;/span&gt;)] on darwin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;copyright&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_input = input(&lt;span class=&quot;string&quot;&gt;&#39;enter a number: &#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;enter a number: 123&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type(my_input)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;type ‘int’&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;my_input = raw_input(&lt;span class=&quot;string&quot;&gt;&#39;enter a number: &#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;enter a number: 123&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type(my_input)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;type ‘str’&lt;br&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Python &lt;span class=&quot;number&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[GCC &lt;span class=&quot;number&quot;&gt;4.2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; (Apple Inc. build &lt;span class=&quot;number&quot;&gt;5577&lt;/span&gt;)] on darwin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;copyright&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_input = input(&lt;span class=&quot;string&quot;&gt;&#39;enter a number: &#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;enter a number: 123&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type(my_input)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;class ‘str’&lt;/p&gt;
&lt;p&gt;####返回可迭代类型代替list&lt;/p&gt;
&lt;p&gt;在上面一节中我们已经知道了xrange方法已经被去除，range在Python3中返回的是可迭代类型。&lt;br&gt;如果你真的希望生成list类型，我们可以使用list()生成一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 2&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; type(range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Python 2.7.6&lt;br&gt;[0, 1, 2]&lt;br&gt;type ‘list’&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PYTHON 3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;, python_version())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(type(range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(list(range(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python 3.4.1&lt;br&gt;range(0, 3)&lt;br&gt;class ‘range’&lt;br&gt;[0, 1, 2]  &lt;/p&gt;
&lt;p&gt;原文出处&lt;a href=&quot;http://spartanideas.msu.edu/2014/06/01/the-key-differences-between-python-2-7-x-and-python-3-x-with-examples/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The key differences between Python 2.7.x and Python 3.x with examples&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;许多初学Python的同学总是在问一个问题，是该学习Python2还是该学习Python3。许多对这个问题的回答经常是：仅仅学习你就喜欢的版本之后再找出之间的不同就可以了。&lt;br&gt;但是如果你开发一个新的项目该如何选择版本呢？只要Python2和Python都支持你所需要的类库，没有什么正确和错误的。然而，弄清两者之间的不同，让你在写代码当时避免一些深坑是非常值得的。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://noble4cc.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noble4cc.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Iterators和Generators</title>
    <link href="http://noble4cc.me/Iterators-and-Generators/"/>
    <id>http://noble4cc.me/Iterators-and-Generators/</id>
    <published>2015-12-30T06:40:00.000Z</published>
    <updated>2016-04-16T10:29:26.000Z</updated>
    
    <content type="html">&lt;p&gt;根据维基百科,迭代器是一个程序员可以遍历一个集合的所有元素的对象,无论其具体实现。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Python编程语言,迭代器是一个实现迭代器协议的对象。迭代器协议包含两个方法。__iter__()方法,它必须返回迭代器对象和next()方法,它返回下一个元素的序列。&lt;br&gt;Python有几个内置对象,实现迭代器协议。例如列表、元组、字符串、词典或文件。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iter.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str = &lt;span class=&quot;string&quot;&gt;&quot;formidable&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; str:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;it = iter(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; it.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; it.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; it.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; list(it)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在代码示例中,我们展示一个在一个字符串中内置的迭代器。Python中的字符串是不可变的字符序列。iter()函数返回一个迭代器对象。我们还可以将迭代器用在list()或tuple()函数上。&lt;br&gt;打印结果：&lt;br&gt;$ ./iter.py&lt;br&gt;f o r m i d a b l e&lt;br&gt;f&lt;br&gt;o&lt;br&gt;r&lt;br&gt;[‘m’, ‘i’, ‘d’, ‘a’, ‘b’, ‘l’, ‘e’]  &lt;/p&gt;
&lt;p&gt;迭代器有几个优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码整洁&lt;/li&gt;
&lt;li&gt;能作用在无限大的容器上&lt;/li&gt;
&lt;li&gt;节省资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过使用迭代器我们意味着节约系统资源,我们可以得到在整个数据集序列中的下一个元素，但没有全部加载到内存中。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# wantme1.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = open(&lt;span class=&quot;string&quot;&gt;&#39;ifyouwantme&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   line = f.readline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; line: &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; line,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码打印ifyouwantme文件的内容。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# wantme2.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = open(&lt;span class=&quot;string&quot;&gt;&#39;ifyouwantme&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; line,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;wantme2。py脚本做了同样的事情。在本例中,我们使用迭代器。代码更干净。&lt;br&gt;在接下来的例子中,我们创建自己的实现迭代器协议的对象。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iterator.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;seq&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.x += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.x**self.x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = seq()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   n += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n &amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在代码示例中,我们创建一个1,4,27,256….的数字序列,这表明,使用迭代器,我们可以作用于无限序列上。for语句调用iter()。函数返回一个迭代器对象,定义了next()方法访问容器中的元素。  &lt;/p&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;p&gt;$ ./iterator.py&lt;br&gt;1&lt;br&gt;4&lt;br&gt;27&lt;br&gt;256&lt;br&gt;3125&lt;br&gt;46656&lt;br&gt;823543&lt;br&gt;16777216&lt;br&gt;387420489&lt;br&gt;10000000000&lt;br&gt;285311670611  &lt;/p&gt;
&lt;p&gt;循环可以用另一种方式被打断。在类定义中我们必须提高抛出StopIteration异常。在接下来的例子中,我们重一个之前的例子。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# stopiter.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;seq14&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.x += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.x &amp;gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; StopIteration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.x**self.x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = seq14()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般来说,生成器是一个特殊的程序,可用于控制循环的迭代行为。生成器是类似于一个函数返回一个数组。生成器有参数,它可以被调用生成一个数字序列。但与返回一个数组的函数不同,生成器一次只产生一个值。这需要更少的内存。  &lt;/p&gt;
&lt;p&gt;让我们来看一个生成器的例子。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# generator.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   x, y = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; x, y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   x += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; x, y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;it = gen()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; it.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; it.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; it.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; StopIteration:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Iteration finished&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们能看到能使用def关键字定义一个生成器，就是像是一个函数。我们在生成器中使用了yield两次。现在重要的是理解yield究竟做了些什么。每当调用yield时，退出生成器并返回一个值。接下来一个迭代器的next()函数被调用，我们继续行后生成的关键字。当yield不存在时，我们在调用next会抛出一个StopIteration异常。&lt;/p&gt;
&lt;p&gt;$ ./generator.py&lt;br&gt;(1, 2)&lt;br&gt;(2, 2)&lt;br&gt;Iteration finished  &lt;/p&gt;
&lt;p&gt;接下来的例子我们将演示斐波那契数列&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# fibonacci.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   a, b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      a, b = b, a + b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iter = fib()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; iter:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      time.sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sys.stdout.flush()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; KeyboardInterrupt:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Calculation stopped&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段程序将源源不断的产生斐波那契数字&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;根据维基百科,迭代器是一个程序员可以遍历一个集合的所有元素的对象,无论其具体实现。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://noble4cc.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noble4cc.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Http协议讲解</title>
    <link href="http://noble4cc.me/HTTP-agreement-to-explain/"/>
    <id>http://noble4cc.me/HTTP-agreement-to-explain/</id>
    <published>2015-12-21T00:21:00.000Z</published>
    <updated>2016-04-16T11:47:01.000Z</updated>
    
    <content type="html">&lt;p&gt;Http协议中文名字是超文本传输协议（超文本就是HTML）。设计之初是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。现在http的作用已不局限于HTML的传输。比较重要的版本是Http1.0、Http1.1、Http2.0。Http的底层协议是TCP，默认端口是80。Http是无连接的无状态的，也就是说每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接协，议对于事务处理没有记忆能力，缺少状态意味着如果后续处理需要前面的信息，则它必须重传。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h4&gt;&lt;p&gt;Http协议里面必须包含URL，URL是统一资源定位符，说起URL还有URI应该介绍一下。URI是统一资源标示符。这两者之间有什么区别呢？URI只是标示一个资源，URL既可以标示资源也提供访问这个资源的方式。也就是说URL是URI的一个子集，URL一定能访问到指定的资源（如果URL正确的话），但URI却不一定。其实URI不常用啦。&lt;br&gt;我们来看看一个完整的URL什么样：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://www.example.com/dir/test;id=123?name=tom&amp;amp;age=18#stuff&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protocol: http&lt;/li&gt;
&lt;li&gt;host: www.example.com&lt;/li&gt;
&lt;li&gt;path: /dir/test&lt;/li&gt;
&lt;li&gt;URL params: id=123&lt;/li&gt;
&lt;li&gt;Query String: name=tom&amp;amp;age=18&lt;/li&gt;
&lt;li&gt;Anchor: stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;protocol：指定低层使用的协议(例如：http, https, ftp)&lt;br&gt;host：HTTP服务器的IP地址或者域名&lt;br&gt;port：HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 &lt;a href=&quot;http://www.example.com:8080/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.example.com:8080/&lt;/a&gt;&lt;br&gt;path：访问资源的路径&lt;br&gt;url-params :用于指定特殊参数的可选项&lt;br&gt;query-string：发送给http服务器的数据&lt;br&gt;anchor：锚,主要定位页面&lt;/p&gt;
&lt;h4 id=&quot;Http请求&quot;&gt;&lt;a href=&quot;#Http请求&quot; class=&quot;headerlink&quot; title=&quot;Http请求&quot;&gt;&lt;/a&gt;Http请求&lt;/h4&gt;&lt;p&gt;Http请求会发送请求保温，Http请求报文由请求行、消息报头、请求正文三部分组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/IBZ3ee.jpg&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;p&gt;请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：&lt;br&gt;&lt;code&gt;Method Request-URI HTTP-Version CRLF&lt;/code&gt;&lt;br&gt;CRLF表示回车和换行，就是回车(CR, ASCII 13, \r) 换行(LF, ASCII 10, \n)。&lt;br&gt;请求方法有很多种，但是常用的就GET个POST方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 请求获取 Request-URI 所标识的资源&lt;/li&gt;
&lt;li&gt;POST 在 Request-URI 所标识的资源后附加新的数据&lt;/li&gt;
&lt;li&gt;HEAD 请求获取由 Request-URI 所标识的资源的响应消息报头&lt;/li&gt;
&lt;li&gt;PUT 请求服务器存储一个资源，并用 Request-URI 作为其标识&lt;/li&gt;
&lt;li&gt;DELETE 请求服务器删除 Request-URI 所标识的资源&lt;/li&gt;
&lt;li&gt;TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断&lt;/li&gt;
&lt;li&gt;CONNECT 保留将来使用&lt;/li&gt;
&lt;li&gt;OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求&lt;br&gt;如果是通过浏览器的地址栏进行请求的话，就是GET请求，GET请求的话请求正文是没有的。通过网页表单请求，就是POST请求  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GET和POST的区别：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;amp;相连，如EditPosts.aspx?name=test1&amp;amp;id=123456。POST 方法是把提交的数据放在HTTP包的Body中。&lt;/li&gt;
&lt;li&gt;GET 提交的数据大小有限制（URL的长度有限制，协议虽然没有明确对URL长度限制，但是浏览器和服务器实际工作当中会限制长度），而POST方法提交的数据没有限制.&lt;/li&gt;
&lt;li&gt;GET 方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。&lt;/li&gt;
&lt;li&gt;GET 方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们使用&lt;a href=&quot;https://github.com/jkbrzt/httpie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTPie&lt;/a&gt;进行一下演示。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept: */*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept-Encoding: gzip, deflate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host: www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User-Agent: HTTPie/0.9.3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该请求报文中请求方法是GET，请求的资源标示是/也就是请求根目录。协议和版本是Http1.1&lt;/p&gt;
&lt;p&gt;####Http响应&lt;br&gt;服务器在接受到一个Http请求后，会做出响应，返回一个Http响应报文。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/AviyMb.jpg&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;p&gt;Http响应表报文由状态行、消息报头、响应正文三部分组成。&lt;br&gt;状态行的格式如下：&lt;br&gt;&lt;code&gt;HTTP-Version Status-Code Reason-Phrase CRLF&lt;/code&gt;&lt;br&gt;其中，HTTP-Version表示服务器HTTP协议的版本；&lt;br&gt;Status-Code表示服务器发回的响应状态代码；&lt;br&gt;Reason-Phrase表示状态代码的文本描述。&lt;br&gt;状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2xx: 成功&lt;/strong&gt;&lt;br&gt;200 OK    请求成功（其后是对GET和POST请求的应答文档。）&lt;br&gt;201 Created    请求被创建完成，同时新的资源被创建。&lt;br&gt;202 Accepted    供处理的请求已被接受，但是处理未完成。&lt;br&gt;&lt;strong&gt;3xx: 重定向&lt;/strong&gt;&lt;br&gt;300 Multiple Choices    多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。&lt;br&gt;301 Moved Permanently    所请求的页面已经转移至新的url。&lt;br&gt;302 Found    所请求的页面已经临时转移至新的url。&lt;br&gt;303 See Other    所请求的页面可在别的url下被找到。&lt;br&gt;304 Not Modified    未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。&lt;br&gt;&lt;strong&gt;4xx: 客户端错误&lt;/strong&gt;&lt;br&gt;400 Bad Request    服务器未能理解请求。&lt;br&gt;401 Unauthorized    被请求的页面需要用户名和密码。&lt;br&gt;402 Payment Required    此代码尚无法使用。&lt;br&gt;403 Forbidden    对被请求页面的访问被禁止。&lt;br&gt;404 Not Found    服务器无法找到被请求的页面。&lt;br&gt;405 Method Not Allowed    请求中指定的方法不被允许。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5xx: 服务器错误&lt;/strong&gt;&lt;br&gt;500 Internal Server Error    请求未完成。服务器遇到不可预知的情况。&lt;br&gt;501 Not Implemented    请求未完成。服务器不支持所请求的功能。&lt;br&gt;502 Bad Gateway    请求未完成。服务器从上游服务器收到一个无效的响应。&lt;br&gt;503 Service Unavailable    请求未完成。服务器临时过载或当机。&lt;br&gt;504 Gateway Timeout    网关超时。  &lt;/p&gt;
&lt;h4 id=&quot;Http报头&quot;&gt;&lt;a href=&quot;#Http报头&quot; class=&quot;headerlink&quot; title=&quot;Http报头&quot;&gt;&lt;/a&gt;Http报头&lt;/h4&gt;&lt;p&gt;HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。每一个报头域都是由名字+“：”+空格+值 组成，消息报头域的名字是大小写无关的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常规 header ：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Cache-Control ：&lt;/code&gt;用于指出请求/响应链上所有缓存必须服从的指令，它必须具有穿透各代理&lt;br&gt;和网关的能力。HTTP1.0 可能不支持该 header 和 Pragma：no-cache。&lt;br&gt;&lt;code&gt;Connection ：&lt;/code&gt;允许客户端指出希望特定连接的选项，且禁止由代理在将来的连接中通讯&lt;br&gt;&lt;code&gt;Date ：&lt;/code&gt;表示消息发生的日期和时间，与 RFC 822 中的 orig-date 语义一致&lt;br&gt;&lt;code&gt;Pragma ：&lt;/code&gt;用来包括实现特定的指令，可能应用到请求/响应链上所有接收方&lt;br&gt;&lt;code&gt;Trailer ：&lt;/code&gt;指出给出的头部域集合在以 chunked transfer-coding 编码的消息的尾部中存在&lt;br&gt;&lt;code&gt;Transfer-Encoding ：&lt;/code&gt;指出应用什么类型的转换到消息主体上，与 content-coding 不同，这不&lt;br&gt;是指定实体的属性而是消息的&lt;br&gt;&lt;code&gt;Upgrade ：&lt;/code&gt;允许客户端指出其支持的其他通讯协议，切愿意使用之，若服务器发现切换是可行的，必须在响应中回 101&lt;br&gt;&lt;code&gt;Via ：&lt;/code&gt;必须由网关或代理来指出请求中的UA和服务器、以及在响应中的原始服务器和客户端的中间协议和接收方。用于跟踪消息转发，避免请求循环&lt;br&gt;&lt;code&gt;Warning ：&lt;/code&gt;用户携带关于消息的状态和转换的额外信息，可能不在消息中反映。一般用于警告应用到消息实体上的缓存操作或转换缺少语义透明度&lt;br&gt;&lt;strong&gt;请求 header：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Accept ：&lt;/code&gt;客户端指出响应可以接受的媒体类型&lt;br&gt;&lt;code&gt;Accept-Charset ：&lt;/code&gt;客户端指出响应可以接受的字符集&lt;br&gt;&lt;code&gt;Accept-Encoding ：&lt;/code&gt;客户端指出响应可以接受的字符编码&lt;br&gt;&lt;code&gt;Accept-Language ：&lt;/code&gt;客户端指出允许的语言&lt;br&gt;&lt;code&gt;Authorization ：&lt;/code&gt;客户端在受到 401 后，需要向服务器标明身份，包括此 header 即可&lt;br&gt;&lt;code&gt;Cookie：&lt;/code&gt;HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。&lt;br&gt;&lt;code&gt;Expect :&lt;/code&gt;客户端指出要求的特殊服务器行为。若服务器无法满足，可以返回 417&lt;br&gt;&lt;code&gt;From :&lt;/code&gt;发出请求的用户的Email&lt;br&gt;&lt;code&gt;Host :&lt;/code&gt;客户端指出要请求的资源的因特网主机和端口号&lt;br&gt;&lt;code&gt;If-Match :&lt;/code&gt; 用于与方法一起使其条件化&lt;br&gt;&lt;code&gt;If-Modified-Since :&lt;/code&gt;用于方法使其条件化，如果请求的变量在本域指定的时间从来不曾修改过，则实体将不会从服务器返回，改为 304&lt;br&gt;&lt;code&gt;If-None-Match :&lt;/code&gt;用于与方法一起使其条件化&lt;br&gt;&lt;code&gt;If-Range :&lt;/code&gt;用于与方法一起使其条件化&lt;br&gt;&lt;code&gt;If-Unmodified-Since :&lt;/code&gt; 用于与方法一起使其条件化，如果请求的资源自 header 值时间以来未改变，则服务器执行该请求&lt;br&gt;&lt;code&gt;Max-Forwards :&lt;/code&gt;提供某种机制，TRACE 和 OPTIONS   方法用来限制可以转发给下个入界服务器&lt;br&gt;代理或网关的数量，相当于客户端跟踪请求链&lt;br&gt;&lt;code&gt;Proxy-Authorization :&lt;/code&gt;允许客户端向代理标识自己，该代理需要认证&lt;br&gt;&lt;code&gt;Range :&lt;/code&gt;字节范围，可以指定单个实体中单个字节范围或范围集&lt;br&gt;&lt;code&gt;Referer :&lt;/code&gt;允许服务器为感兴趣的资源、日志、优化缓存等生成向后链接清单&lt;br&gt;&lt;code&gt;TE :&lt;/code&gt;指出愿意在响应中接受任何扩展的 transfer-coding&lt;br&gt;&lt;code&gt;User-Agent :&lt;/code&gt;包含发起请求的用户代理（浏览器和 OS）的信息&lt;br&gt;&lt;strong&gt;响应 header：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Accept-Ranges ：&lt;/code&gt;服务器指出对请求的资源可接受的范围，可以是字节数或 none&lt;br&gt;&lt;code&gt;Age ：&lt;/code&gt;HTTP 使用改header来传输从缓存服务器获取时的响应消息的估计年龄，是缓存服务器估计从响应产生或被原始服务器重新证实以来的总时间&lt;br&gt;&lt;code&gt;Set-Cookie：&lt;/code&gt;设置Http Cookie&lt;br&gt;&lt;code&gt;ETag ：&lt;/code&gt;提供所请求的实体标签的当前值&lt;br&gt;&lt;code&gt;Location ：&lt;/code&gt;用来重定向接收方到非 URI 的位置来完成请求。对于 201，Location 是由请求创建的新资源的标识&lt;br&gt;&lt;code&gt;Proxy-Authenticate ：&lt;/code&gt;该 header 必须作为 407 响应的一部分，指出认证方案和可应用到代理&lt;br&gt;的 URI 上的参数&lt;br&gt;&lt;code&gt;Retry-After ：&lt;/code&gt;能与 503 响应一起用于指出希望该服务对客户端可以维持多久，&lt;br&gt;&lt;code&gt;Server ：&lt;/code&gt;指出服务器使用的软件信息&lt;br&gt;&lt;code&gt;Vary ：&lt;/code&gt;  告诉下游代理是使用缓存响应还是从原始服务器请求&lt;br&gt;&lt;code&gt;WWW-Authenticate ：&lt;/code&gt;必须包括在401中，值至少有challenge组成，它指出认证方案和可应用到 URI 的参数&lt;br&gt;&lt;strong&gt;实体 header：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Allow ：&lt;/code&gt;客户端指出对 URI 的资源允许的方法&lt;br&gt;&lt;code&gt;Content-Encoding :&lt;/code&gt;用作对 media-type 的修饰符，其值将必须应用到实体 body 上的额外内容编码。主要用来允许压缩而不丢失下层媒体类型标识&lt;br&gt;&lt;code&gt;Content-Language :&lt;/code&gt; 客户端指出自己所选的语言，指出目标观众对所封装实体的自然语言。这可能与实体 body 内所有语言相同&lt;br&gt;&lt;code&gt;Content-Length ：&lt;/code&gt;指出实体 body 按十进制数的字节流的尺寸&lt;br&gt;&lt;code&gt;Content-Location ：&lt;/code&gt;如果实体能从独立于请求 URI   的位置访问，则服务器可以提供该实体自己的位置&lt;br&gt;&lt;code&gt;Content-MD5 ：&lt;/code&gt;是实体 body 的 MD5 摘要，以便提供端到端的完整性检查&lt;br&gt;&lt;code&gt;Content-Range ：&lt;/code&gt;与实体 body的一部分一起发送，用来指定该部分body应用到全部 body的哪个地方&lt;br&gt;&lt;code&gt;Content-Type ：&lt;/code&gt;指出发送给接收方的实体 body 的媒体类型，媒体类型参见 IANA&lt;br&gt;&lt;code&gt;Expires ：&lt;/code&gt;指出响应被认为过期的日期/时间&lt;br&gt;&lt;code&gt;Last-Modified ：&lt;/code&gt;指出原始服务器认为该变量最后修改的日期和时间，确实意思取决于原是服务器的实现和资源的属性。对文件，可能只是文件系统内最后修改时间&lt;br&gt;extension-header ：允许客户端定义新的实体头，但是这些域可能无法未接受方识别&lt;/p&gt;
&lt;p&gt;Http响应报头如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BDPAGETYPE: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BDQID: 0xcd0245a700139af2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BDUSERID: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cache-Control: private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: Keep-Alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Encoding: gzip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/html; charset=utf-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cxy_all: baidu+73cf74ccfaa722f3a137b93b04dd0db0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Fri, 19 Feb 2016 02:53:07 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Expires: Fri, 19 Feb 2016 02:52:57 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P3P: CP=&amp;quot; OTI DSP COR IVA OUR IND COM &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server: BWS/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set-Cookie: BAIDUID=ECAD954834BCC8BB10388B1B954A181C:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set-Cookie: BIDUPSID=ECAD954834BCC8BB10388B1B954A181C; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set-Cookie: PSTM=1455850387; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set-Cookie: BDSVRTM=0; path=/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set-Cookie: BD_HOME=0; path=/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set-Cookie: H_PS_PSSID=1452_18240_17949_17001_17073_15321_11764_10634; path=/; domain=.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vary: Accept-Encoding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X-Powered-By: HPHP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X-UA-Compatible: IE=Edge,chrome=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是百度首页的响应报文的消息报头，其中也包含了很多自定的属性&lt;/p&gt;
&lt;h4 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h4&gt;&lt;p&gt;说起Cookie想必大家都明白，这是一项很古老的技术，起源是Netscape的工程师用来实现购物车，在Netscape1.0时2就存在的技术。简单来讲cookie的在客户端存储一些文本，用来维护客户端的状态。&lt;br&gt;在Http协议中，返回报文通过报头中的Set-Cookie来设置cookie，格式如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set-Cookie:value&lt;/code&gt;&lt;br&gt;value可以使用k=v的形式，中间使用分号做分隔。&lt;br&gt;当发送请求报文时，通过报头的Cookie发送cookie，形式如下:&lt;br&gt;&lt;code&gt;Cookie : value&lt;/code&gt;&lt;br&gt;cookie可以设置失效的时间，超过改时间将会被浏览器删除，如果没有指定cookie的失效时间，当浏览器被关闭时cookie失效删除。&lt;/p&gt;
&lt;p&gt;Cookie的缺点：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不安全, 这是最直接的一个原因, 因为 Cookie 是保存在客户端计算机上的, 因此很容易被修改, 从而导致访问服务器时应用程序的执行失败或者其他安全问题. &lt;/li&gt;
&lt;li&gt;严重限制传送内容的大小, 这是最实现的一个原因, 大多数浏览器都限制 Cookie 的大小, 一般情况下都不能超过 4096 个字节, 因此传送的内容有限. &lt;/li&gt;
&lt;li&gt;用户可控制 Cookie 的开启与停用: 这是最无奈的一个原因, 当用户设置其浏览器停止接收 Cookie时, 如此, 它便失去了作用. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####Python中使用Http&lt;br&gt;在python中使用http请求是非常方便的，末尾可以使用requests包，非常方便的进行htpp访问。详情请看文档：&lt;a href=&quot;http://cn.python-requests.org/zh_CN/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;requests&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r = requests.get(&amp;apos;https://api.github.com/user&amp;apos;, auth=(&amp;apos;user&amp;apos;, &amp;apos;pass&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r.status_code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r.headers[&amp;apos;content-type&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;application/json; charset=utf8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r.encoding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;utf-8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r.text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u&amp;apos;&amp;#123;&amp;quot;type&amp;quot;:&amp;quot;User&amp;quot;...&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r.json()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;u&amp;apos;private_gists&amp;apos;: 419, u&amp;apos;total_private_repos&amp;apos;: 77, ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Http协议中文名字是超文本传输协议（超文本就是HTML）。设计之初是为了将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。现在http的作用已不局限于HTML的传输。比较重要的版本是Http1.0、Http1.1、Http2.0。Http的底层协议是TCP，默认端口是80。Http是无连接的无状态的，也就是说每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接协，议对于事务处理没有记忆能力，缺少状态意味着如果后续处理需要前面的信息，则它必须重传。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://noble4cc.me/categories/C/"/>
    
    
      <category term="C++" scheme="http://noble4cc.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python的魔术方法总结</title>
    <link href="http://noble4cc.me/Python-magic-method-summary/"/>
    <id>http://noble4cc.me/Python-magic-method-summary/</id>
    <published>2015-11-11T01:41:00.000Z</published>
    <updated>2016-04-16T06:09:47.000Z</updated>
    
    <content type="html">&lt;p&gt;Python的魔术在python中是比较有特色的部分，合理使用还会使程序变的更加简洁。今天我们就来介绍一下python的魔术方法&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;首先什么是魔术方法，在python中，所有的变量都是基于对象的，每个对象中都存在着魔术方法，或者说你都可以定义魔术方法。所有的魔术方法都是以双下划线开头和结尾的。&lt;br&gt;他们和普通的成员方法没有区别，只是名字是固定的，比如说我们最常用的是&lt;code&gt;__init__&lt;/code&gt;,这是一个类的构造方法。解释器默认&lt;code&gt;__init__&lt;/code&gt;就是一个类的构造方法，在构造一个对象时会调用这个方法。当然并不是所有的每个类都存在魔术方法，你必须在定义类时将魔术方法定义好，当然如果是python3的话默认是继承object的，一旦被定义就会继承父类的魔术方法。&lt;/p&gt;
&lt;h3 id=&quot;构造和初始化&quot;&gt;&lt;a href=&quot;#构造和初始化&quot; class=&quot;headerlink&quot; title=&quot;构造和初始化&quot;&gt;&lt;/a&gt;构造和初始化&lt;/h3&gt;&lt;p&gt;正如我们之前提到的构造方法__init__,它也是一个魔术方法，我们使用它在构造时初始化一些数据。但是当我们构造一个对象的实例时，__init__并不是罪先调用的，在__init__调用之前，会先调用__new__,在这个对象的生命周期的末尾会调用__del__,现在我们就看一下这三个方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;__new__(cls, […):&lt;/strong&gt;执行在__init__之前，这是个类级别的方法，依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。一般我们不会使用这个方法，就不做过多讨论了，有兴趣的同学可以查看文档。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;__init__(self, […):&lt;/strong&gt;构造方法，负责构造一个实例时数据的初始化，第一个参数是该实例的引用，它几乎是最常用的魔术方法了。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;*__del__(self):&lt;/em&gt;就像__init__一样，__init__是个狗杂函数，它就是个析构函数。当然，这不是定义了del obj的行为。它其实是定义了一些在解释器将他牢记回收时我们所做的事情。比如说关闭文件或者说socket。但是就算定义了__del__我们一步一定保证该方法会马上执行，因为该对象可能还存活着。__del__平时很少会用到，并且请谨慎使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileObject&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, filepath=&lt;span class=&quot;string&quot;&gt;&#39;~&#39;&lt;/span&gt;, filename=&lt;span class=&quot;string&quot;&gt;&#39;sample.txt&#39;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.file = open(join(filepath, filename), &lt;span class=&quot;string&quot;&gt;&#39;r+&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.file.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; self.file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;比较魔术方法&quot;&gt;&lt;a href=&quot;#比较魔术方法&quot; class=&quot;headerlink&quot; title=&quot;比较魔术方法&quot;&gt;&lt;/a&gt;比较魔术方法&lt;/h3&gt;&lt;p&gt;python提供了一些方法用于使用比较运算符比较两个对象，比如说 obj1&amp;lt;obj2.我们只需要覆盖这些方法就可以使用他了运算符来进行比较了。下面列出这些方法:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__cmp__(self, other):&lt;/strong&gt; __cmp__ 是一个万能的比较方法，我们能使用所有的比较运算符进行比较。当self &amp;lt;other时我们就返回一个负数，大于返回一个正数，等于的话返回0.虽然有其他方法可以定义每种比较操作，但是使用__cmp__可以消除重复性，让代码更加清晰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__eq__(self, other):&lt;/strong&gt;定义相等符号的行为，==&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__ne__(self, other):&lt;/strong&gt;定义不等符号的行为 !=&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__lt__(self, other):&lt;/strong&gt;定义小于符号的行为，&amp;lt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__gt__(self, other):&lt;/strong&gt;定义大于符号的行为，&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__le__(self, other):&lt;/strong&gt;定义小于等于符号的行为，&amp;lt;=&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__ge__(self, other):&lt;/strong&gt;定义大于等于符号的行为，&amp;gt;=&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Word(str):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;Class for words, defining comparison based on word length.&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __new__(cls, word):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # Note that we have to use __new__. This is because str is an immutable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # type, so we have to initialize it early (at creation)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if &amp;apos; &amp;apos; in word:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print &amp;quot;Value contains spaces. Truncating to first space.&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            word = word[:word.index(&amp;apos; &amp;apos;)] # Word is now all chars before first space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return str.__new__(cls, word)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __gt__(self, other):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return len(self) &amp;gt; len(other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __lt__(self, other):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return len(self) &amp;lt; len(other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __ge__(self, other):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return len(self) &amp;gt;= len(other)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __le__(self, other):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return len(self) &amp;lt;= len(other)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;数学运算符&quot;&gt;&lt;a href=&quot;#数学运算符&quot; class=&quot;headerlink&quot; title=&quot;数学运算符&quot;&gt;&lt;/a&gt;数学运算符&lt;/h3&gt;&lt;p&gt;就像比较运算符一样，python也提供了可以自定义的数学符号行为。不如说常见的取负，取正，去绝对值等。还有+ - * /等运算。其实这就像C++中的运算符重载。在实际开发中非常的方便&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__pos__(self):&lt;/strong&gt;实现一个取正数的操作(比如 +obj ，python调用__pos__函数)&lt;br&gt;&lt;strong&gt;__neg__(self):&lt;/strong&gt;实现一个取负数的操作(比如 -obj )&lt;br&gt;&lt;strong&gt;__abs__(self):&lt;/strong&gt;实现一个内建的abs()函数的行为&lt;br&gt;&lt;strong&gt;__invert__(self):&lt;/strong&gt;实现一个取反操作符（～操作符）的行为。想要了解这个操作的解释&lt;br&gt;&lt;strong&gt;__round__(self, n):&lt;/strong&gt;实现一个内建的round（）函数的行为。 n 是待取整的十进制数.&lt;br&gt;&lt;strong&gt;__floor__(self):&lt;/strong&gt;实现math.floor()的函数行为,比如, 把数字下取整到最近的整数.&lt;br&gt;&lt;strong&gt;__ceil__(self):&lt;/strong&gt;实现math.ceil()的函数行为,比如, 把数字上取整到最近的整数.&lt;br&gt;&lt;strong&gt;__trunc__(self):&lt;/strong&gt;实现math.trunc()的函数行为,比如, 把数字截断而得到整数.  &lt;/p&gt;
&lt;p&gt;好吧，现在我们开始介绍双目运算操作或函数，比如 +, -, * 等等. 这些很容易自解释. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__add__(self, other):&lt;/strong&gt;实现一个加法.&lt;br&gt;&lt;strong&gt;__sub__(self, other):&lt;/strong&gt;实现一个减法.&lt;br&gt;&lt;strong&gt;__mul__(self, other):&lt;/strong&gt;实现一个乘法.&lt;br&gt;&lt;strong&gt;__floordiv__(self, other):&lt;/strong&gt;实现一个“//”操作符产生的整除操作（）&lt;br&gt;&lt;strong&gt;__div__(self, other):&lt;/strong&gt;实现一个“/”操作符代表的除法操作.&lt;br&gt;&lt;strong&gt;__truediv__(self, other):&lt;/strong&gt;实现真实除法，注意，只有当你from __future__ import division时才会有效  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__mod__(self, other):&lt;/strong&gt;实现一个“%”操作符代表的取模操作.&lt;br&gt;&lt;strong&gt;__divmod__(self, other):&lt;/strong&gt;实现一个内建函数divmod（）&lt;br&gt;&lt;strong&gt;__pow__:&lt;/strong&gt; 实现一个指数操作(“**”操作符）的行为   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__lshift__(self, other):&lt;/strong&gt;实现一个位左移操作（&amp;lt;&amp;lt;）的功能&lt;br&gt;&lt;strong&gt;__rshift__(self, other):&lt;/strong&gt;实现一个位右移操作（&amp;gt;&amp;gt;）的功能.&lt;br&gt;&lt;strong&gt;__and__(self, other):&lt;/strong&gt;实现一个按位进行与操作（&amp;amp;）的行为.&lt;br&gt;&lt;strong&gt;__or__(self, other): &lt;/strong&gt;实现一个按位进行或操作（|）的行为.&lt;br&gt;&lt;strong&gt;__xor__(self, other):&lt;/strong&gt;实现一个异或操作（^）的行为  &lt;/p&gt;
&lt;p&gt;此外还有反运算符魔术方法，反运算其实和不同的运算（比如加减乘除）是一样的，不一样的是魔术方法在传参的时候将self和 other进行交换。每个反运算魔术方法只是在名字前面添加r，比如反加法是：__radd__,在这里我们就不具体介绍了。&lt;/p&gt;
&lt;h3 id=&quot;增量运算&quot;&gt;&lt;a href=&quot;#增量运算&quot; class=&quot;headerlink&quot; title=&quot;增量运算&quot;&gt;&lt;/a&gt;增量运算&lt;/h3&gt;&lt;p&gt;所谓的增量运算就是对象自己做某种运算,最后的值再返赋值给自己，比如num/=2。下面有很多为增量运算定义的预算符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__iadd__(self, other):&lt;/strong&gt;加法赋值&lt;br&gt;&lt;strong&gt;__isub__(self, other):&lt;/strong&gt;减法赋值.&lt;br&gt;&lt;strong&gt;__imul__(self, other):&lt;/strong&gt;乘法赋值&lt;br&gt;&lt;strong&gt;__ifloordiv__(self, other):&lt;/strong&gt;整除赋值，地板除，相当于 //= 运算符.&lt;br&gt;&lt;strong&gt;__idiv__(self, other):&lt;/strong&gt;除法赋值，相当于 /= 运算符.&lt;br&gt;&lt;strong&gt;__itruediv__(self, other):&lt;/strong&gt;真除赋值，注意只有你 whenfrom __future__ import divisionis，才有效.&lt;br&gt;&lt;strong&gt;__imod__(self, other):&lt;/strong&gt;模赋值，相当于 %= 运算符.&lt;br&gt;&lt;strong&gt;__ipow__:&lt;/strong&gt;乘方赋值，相当于 &lt;strong&gt;= 运算符.  
&lt;/strong&gt;__ilshift__(self, other):&lt;strong&gt;左移赋值，相当于 &amp;lt;&amp;lt;= 运算符.  
&lt;/strong&gt;__irshift__(self, other):&lt;strong&gt;左移赋值，相当于 &amp;gt;&amp;gt;= 运算符.  
&lt;/strong&gt;__iand__(self, other):&lt;strong&gt;与赋值，相当于 &amp;amp;= 运算符.  
&lt;/strong&gt;__ior__(self, other):&lt;strong&gt;或赋值，相当于 |= 运算符.  
&lt;/strong&gt;__ixor__(self, other):**异或运算符，相当于 ^= 运算符.  &lt;/p&gt;
&lt;h3 id=&quot;类型转换&quot;&gt;&lt;a href=&quot;#类型转换&quot; class=&quot;headerlink&quot; title=&quot;类型转换&quot;&gt;&lt;/a&gt;类型转换&lt;/h3&gt;&lt;p&gt;python存在着一些魔术方法，是用来提供类型转换的，比如我们执行int(obj)或者float(obj)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__int__(self):&lt;/strong&gt;转换成整型.&lt;br&gt;&lt;strong&gt;__long__(self):&lt;/strong&gt;转换成长整型.&lt;br&gt;&lt;strong&gt;__float__(self):&lt;/strong&gt;转换成浮点型.&lt;br&gt;&lt;strong&gt;__complex__(self):&lt;/strong&gt;转换成 复数型.&lt;br&gt;&lt;strong&gt;__oct__(self):&lt;/strong&gt;转换成八进制.&lt;br&gt;&lt;strong&gt;__hex__(self):&lt;/strong&gt;转换成十六进制.&lt;br&gt;&lt;strong&gt;__index__(self):&lt;/strong&gt;当对象被切片时转换成int型。如果你定义了一个可能被用来做切片操作的数值型，你就应该定义__index__.&lt;br&gt;&lt;strong&gt;__trunc__(self):&lt;/strong&gt;当 math.trunc(self) 使用时被调用.__trunc__返回自身类型的整型截取 (通常是一个长整型).&lt;br&gt;&lt;strong&gt;__coerce__(self,other):&lt;/strong&gt;执行混合类型的运算，如果转换不能完成，应该返回None；否则，要返回一对两个元数的元组self和other, 被操作成同类型。  &lt;/p&gt;
&lt;h3 id=&quot;表达你的类&quot;&gt;&lt;a href=&quot;#表达你的类&quot; class=&quot;headerlink&quot; title=&quot;表达你的类&quot;&gt;&lt;/a&gt;表达你的类&lt;/h3&gt;&lt;p&gt;使用一个字符串标示一个对象是非常有用的，这样做会使你的对象更加直观展示，比如 print obj，如果没有实现任何魔术方法的话，将大一这个对象的地址，如果实现一个魔术方法，你可以自定义打印的内容。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__str__(self):&lt;/strong&gt;&lt;br&gt;定义当 str() 被你的一个类的实例调用时所要产生的行为。&lt;br&gt;&lt;strong&gt;__repr__(self):&lt;/strong&gt;&lt;br&gt;定义 当 repr()  被你的一个类的实例调用时所要产生的行为。 str() 和 repr() 的主要区别是其目标群体。 repr() 返回的是机器可读的输出，而 str() 返回的是人类可读的。&lt;br&gt;&lt;strong&gt;__unicode__(self):&lt;/strong&gt;&lt;br&gt;定义当 unicode() 被你的一个类的实例调用时所要产生的行为。 unicode() 和 str() 很相似，但是返回的是unicode字符串。注意，如果对你的类调用 str() 然而你只定义了 __unicode__() ，那么其将不会工作。你应该定义 __str__() 来确保调用时能返回正确的值，并不是每个人都有心情去使用unicode。&lt;br&gt;&lt;strong&gt;__format__(self, formatstr):&lt;/strong&gt;&lt;br&gt;定义当你的一个类的实例被用来用新式的格式化字符串方法进行格式化时所要产生的行为。例如， “Hello, {0:abc}!”.format(a) 将会导致调用 a.__format__(“abc”) 。这对定义你自己的数值或字符串类型是十分有意义的，你可能会给出一些特殊的格式化选项。&lt;br&gt;&lt;strong&gt;__hash__(self):&lt;/strong&gt;&lt;br&gt;定义当 hash()被你的一个类的实例调用时所要产生的行为。它返回一个整数，用来在字典中进行快速比较。请注意，这通常也承担着实现__eq__。有下面这样的规则：a == b 暗示着 hash(a) == hash(b) 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__nonzero__(self):&lt;/strong&gt;&lt;br&gt;定义当 bool() 被你的一个类的实例调用时所要产生的行为。本方法应该返回True或者False，取决于你想让它返回的值。&lt;br&gt;&lt;strong&gt;__dir__(self):&lt;/strong&gt;&lt;br&gt;定义当 dir() 被你的一个类的实例调用时所要产生的行为。该方法应该返回一个属性的列表给用户，一般而言，实现 __dir__ 是不必要的，但是，如果你重新定义了__getattr__或__getattribute__（你将在下一节中看到）或者其它的动态生成属性，那么它对你的类的交互使用是至关重要的。&lt;br&gt;&lt;strong&gt;__sizeof__(self):&lt;/strong&gt;&lt;br&gt;定义当 sys.getsizeof() 被你的一个类的实例调用时所要产生的行为。该方法应该以字节为单位，返回你的对象的大小。这通常对于以C扩展的形式实现的Python类更加有意义，其有助于理解这些扩展。  &lt;/p&gt;
&lt;p&gt;###属性访问&lt;/p&gt;
&lt;p&gt;python 比较有特色的是可以动态构建属性字段（其实很多脚本语言都有这个功能），比如obj没有name属性，我们可以这样动态的添加，obj.name=’new name’,在魔术方法方面也定义了很多方法让我们自定义这种行文&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__getattr__(self, name):&lt;/strong&gt;&lt;br&gt;你可以定义如何处理用户试图访问一个不存在（不存在或还没创建）属性的行为。这对于捕获或者重定向一般的拼写错误非常有用，给出访问了不能访问的属性的警告（如果你愿意，你还可以推断并返回那个属性。），或者巧妙地处理一个AttributeError异常。它只有在一个不存在的属性被访问的情况下才被调用，然而，这并不是一个真正封装的方案。&lt;br&gt;&lt;strong&gt;__setattr__(self, name, value):&lt;/strong&gt;&lt;br&gt;与__getattr__不同,__setattr__是一个真正的封装方案。它允许你定义当给一个存在或不存在的属性赋值时的行为，意味着对任何属性值的改变你都可以定义一个规则。可是，你得小心使用__setattr__，在这个清单结尾的例子会向你说明。&lt;br&gt;&lt;strong&gt;__delattr__(self, name):&lt;/strong&gt;&lt;br&gt;它与__setattr__非常像, 只不过是用来删除而不是设置属性。 __detattr__需要预防措施，就像setattr一样，当被调用时可能会引起无限递归（当__delattr__已经实现时，调用 del self.name 就会引起无限的递归)。&lt;br&gt;&lt;strong&gt;__getattribute__(self, name):&lt;/strong&gt;&lt;br&gt; __getattribute__相当适合它的同伴__setattr__和__delattr__.但我却不建议你使用它。__getattribute__只有在新风格的类中才会被使用（所有的新风格类在Python最新的版本中，在老版本中，你可以子类化object来获得一个新风格类。它允许你定义一条规则来处理无论什么时候属性值被访问时的行为。比如类似于由于其它的伙伴犯错而引起的无限递归（这时你就可以调用基类的__getattribute__方法来阻止它）。它也避免了对__getattr__的依赖，当__getattribute__方法已经实现的时候，__getattr__只有在__getattribute__被明确的调用或抛出一个AttributeError异常的时候才会被调用。这个方法能被使用（毕竟，这是你的选择），但是我不推荐它，因为它很少使用并且运行的时候很难保证没有BUG。   &lt;/p&gt;
&lt;h3 id=&quot;自定义序列&quot;&gt;&lt;a href=&quot;#自定义序列&quot; class=&quot;headerlink&quot; title=&quot;自定义序列&quot;&gt;&lt;/a&gt;自定义序列&lt;/h3&gt;&lt;p&gt;python还可以使用魔术方法将一个对象变成像内置序列一样使用(dict,list….)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__len__(self):&lt;/strong&gt;&lt;br&gt;返回容器的长度。对于可变和不可变容器的协议，这都是其中的一部分。&lt;br&gt;&lt;strong&gt;__getitem__(self, key):&lt;/strong&gt;&lt;br&gt;定义当某一项被访问时，使用self[key]所产生的行为。这也是不可变容器和可变容器协议的一部分。如果键的类型错误将产生TypeError；如果key没有合适的值则产生KeyError。&lt;br&gt;&lt;strong&gt;__setitem__(self, key, value):&lt;/strong&gt;&lt;br&gt;定义当一个条目被赋值时，使用self[nkey] = value所产生的行为。这也是协议的一部分。而且，在相应的情形下也会产生KeyError和TypeError。&lt;br&gt;&lt;strong&gt;__delitem__(self, key):&lt;/strong&gt;&lt;br&gt;定义当某一项被删除时所产生的行为。（例如del self[key]）。这只是可变容器协议的一部分。当你使用一个无效的键时必须抛出适当的异常。&lt;br&gt;&lt;strong&gt;__iter__(self):&lt;/strong&gt;&lt;br&gt;返回一个容器迭代器，很多情况下会返回迭代器，尤其是当内置的iter()方法被调用的时候，以及当使用for x in container:方式循环的时候。迭代器是它们本身的对象，它们必须定义返回self的&lt;strong&gt;iter&lt;/strong&gt;方法。&lt;br&gt;&lt;strong&gt;__reversed__(self):&lt;/strong&gt;&lt;br&gt;实现当reversed()被调用时的行为。应该返回序列反转后的版本。仅当序列可以是有序的时候实现它，例如对于列表或者元组。&lt;br&gt;&lt;strong&gt;__contains__(self, item):&lt;/strong&gt;&lt;br&gt;定义了调用in和not in来测试成员是否存在的时候所产生的行为。你可能会问为什么这个不是序列协议的一部分？因为当__contains__没有被定义的时候，Python会迭代这个序列，并且当找到需要的值时会返回True。&lt;br&gt;&lt;strong&gt;__missing__(self, key):&lt;/strong&gt;&lt;br&gt;其在dict的子类中被使用。它定义了当一个不存在字典中的键被访问时所产生的行为。（例如，如果我有一个字典d，当”george”不是字典中的key时，使用了d[“george”]，此时d[“george”]将会被调用）。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FunctionalList&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;A class wrapping a list with some extra functional magic, like head,    tail, init, last, drop, and take.&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, values=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; values &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.values = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.values = values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__len__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; len(self.values)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# if key is of invalid type or value, the list values will raise the error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.values[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__setitem__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key, value)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.values[key] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__delitem__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; self.values[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; iter(self.values)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__reversed__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; FunctionalList(reversed(self.values))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, value)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.values.append(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# get the first element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.values[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# get all elements after the first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.values[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# get elements up to the last&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.values[:&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# get last element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.values[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# get all elements except first n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.values[n:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# get first n elements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.values[:n]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h3&gt;&lt;p&gt;你也可以控制怎么使用内置在函数sisinstance()和issubclass()方法 反射定义魔法方法. 这个魔法方法是:&lt;br&gt;&lt;strong&gt;__instancecheck__(self, instance):&lt;/strong&gt;&lt;br&gt;检查对象是否是您定义的类的一个实例(例.isinstance(instance, class).&lt;br&gt;&lt;strong&gt;__subclasscheck__(self, subclass):&lt;/strong&gt;&lt;br&gt;检查类是否是你定义类的子类 (例.issubclass(subclass, class)).&lt;br&gt;这些魔法方法的用例看起来很小, 并且确实非常实用. 我不想花太多时间在反射魔法方法上，因为它们不是非常重要, 但是它们反应了关于面向对象程序上一些重要的东西在Python上,并且总的来说Python: 总是一个简单的方法去找某些事情, 即使是没有必要的. 这些魔法方法可能看起来不是很有用, 但是一旦你需要它们，你会感到庆幸它们的存在 (并且为自己阅读了本指南高兴!).&lt;/p&gt;
&lt;h3 id=&quot;可调用对象&quot;&gt;&lt;a href=&quot;#可调用对象&quot; class=&quot;headerlink&quot; title=&quot;可调用对象&quot;&gt;&lt;/a&gt;可调用对象&lt;/h3&gt;&lt;p&gt;在Python中，一个特殊的魔法方法可以让类的实例的行为表现的像函数一样，你可以调用它们，将一个函数当做一个参数传到另外一个函数中等等。这是一个非常强大的特性，其让Python编程更加舒适甜美。&lt;br&gt;&lt;strong&gt;__call__(self, [args…]):&lt;/strong&gt;&lt;br&gt;允许一个类的实例像函数一样被调用。实质上说，这意味着 x() 与 x.__call__() 是相同的。注意 __call__ 的参数可变。这意味着你可以定义 __call__ 为其他你想要的函数，无论有多少个参数。&lt;br&gt;__call__ 在那些类的实例经常改变状态的时候会非常有效。“调用”这个实例是一种改变这个对象状态的直接和优雅的做法。&lt;/p&gt;
&lt;h3 id=&quot;会话管理器&quot;&gt;&lt;a href=&quot;#会话管理器&quot; class=&quot;headerlink&quot; title=&quot;会话管理器&quot;&gt;&lt;/a&gt;会话管理器&lt;/h3&gt;&lt;p&gt;在Python 2.5中，为了代码重用而新定义了一个关键字with，其也就带来了一种with语句。会话管理在Python中并不罕见（之前是作为库的一部分而实现的），不过直到PEP 343被接受后，其就作为了一种一级语言结构。你也许在之前看到过这样的语句：  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;with open(&amp;apos;foo.txt&amp;apos;) as bar:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 执行一些针对bar的操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会话管理器通过包装一个with语句来设置和清理相应对象的行为。会话管理器的行为通过两个魔方方法来决定:&lt;br&gt;&lt;strong&gt;__enter__(self):&lt;/strong&gt;&lt;br&gt;定义了当使用with语句的时候，会话管理器在块被初始创建事要产生的行为。请注意，__enter__的返回值与with语句的目标或者as后的名字绑定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__exit__(self, exception_type, exception_value, traceback):&lt;/strong&gt;&lt;br&gt;定义了当一个代码块被执行或者终止后，会话管理器应该做什么。它可以被用来处理异常、执行清理工作或做一些代码块执行完毕之后的日常工作。如果代码块执行成功，exception_type，exception_value，和traceback将会为None。否则，你可以选择处理这个异常或者是直接交给用户处理。如果你想处理这个异常的话，请确保&lt;strong&gt;exit&lt;/strong&gt;在所有语句结束之后返回True。如果你想让异常被会话管理器处理的话，那么就让其产生该异常。   &lt;/p&gt;
&lt;p&gt;__enter__和__exit__对于那些定义良好以及有普通的启动和清理行为的类是很有意义的。你也可以使用这些方法来创建一般的可以包装其它对象的会话管理器。下面是一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Closer:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos;通过with语句和一个close方法来关闭一个对象的会话管理器。&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self, obj):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.obj = obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __enter__(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return self.obj # bound to target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __exit__(self, exception_type, exception_val, trace):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           self.obj.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        except AttributeError: # obj isn&amp;apos;t closable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           print &amp;apos;Not closable.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return True # exception handled successfully&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;描述对象&quot;&gt;&lt;a href=&quot;#描述对象&quot; class=&quot;headerlink&quot; title=&quot;描述对象&quot;&gt;&lt;/a&gt;描述对象&lt;/h3&gt;&lt;p&gt;描述器是通过获取、设置以及删除的时候被访问的类。当然也可以改变其它的对象。描述器并不是独立的。相反，它意味着被一个所有者类持有。当创建面向对象的数据库或者类，里面含有相互依赖的属相时，描述器将会非常有用。一种典型的使用方法是用不同的单位表示同一个数值，或者表示某个数据的附加属性（比如坐标系上某个点包含了这个点到原点的距离信息）。&lt;br&gt;为了成为一个描述器，一个类必须至少有__get__，__set__，__delete__方法被实现，让我们看看这些魔法方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__get__(self, instance, owner):&lt;/strong&gt;&lt;br&gt;定义了当描述器的值被取得的时候的行为。instance是拥有该描述器对象的一个实例。owner是拥有者本身。&lt;br&gt;&lt;strong&gt;__set__(self, instance, value):&lt;/strong&gt;&lt;br&gt;定义了当描述器的值被改变的时候的行为。instance是拥有该描述器类的一个实例。value是要设置的值。&lt;br&gt;&lt;strong&gt;__delete__(self, instance):&lt;/strong&gt;&lt;br&gt;定义了当描述器的值被删除的时候的行为。instance是拥有该描述器对象的一个实例。  &lt;/p&gt;
&lt;h3 id=&quot;考拷贝对象&quot;&gt;&lt;a href=&quot;#考拷贝对象&quot; class=&quot;headerlink&quot; title=&quot;考拷贝对象&quot;&gt;&lt;/a&gt;考拷贝对象&lt;/h3&gt;&lt;p&gt;有时候，尤其是当你在处理可变对象时，你可能想要复制一个对象，然后对其做出一些改变而不希望影响原来的对象。这就是Python的copy所发挥作用的地方。然而（幸运的是），Python的模块并不是“感性”的，所以我们没必要担心一个基于Linux的机器会突然开始工作，但是我们确实需要告诉Python如何高效地复制一些东西。&lt;br&gt;&lt;strong&gt;__copy__(self):&lt;/strong&gt;&lt;br&gt;定义了当对你的类的实例调用copy.copy()时所产生的行为。copy.copy()返回了你的对象的一个浅拷贝——这意味着，当实例本身是一个新实例时，它的所有数据都被引用了——例如，当一个对象本身被复制了，它的数据仍然是被引用的（因此，对于浅拷贝中数据的更改仍然可能导致数据在原始对象的中的改变）。&lt;br&gt;&lt;strong&gt;__deepcopy__(self, memodict={}):&lt;/strong&gt;&lt;br&gt;定义了当对你的类的实例调用copy.deepcopy()时所产生的行为。copy.deepcopy()返回了你的对象的一个深拷贝——对象和其数据都被拷贝了。memodict是对之前被拷贝的对象的一个缓存——这优化了拷贝过程并且阻止了对递归数据结构拷贝时的无限递归。当你想要进行对一个单独的属性进行深拷贝时，调用copy.deepcopy()，并以memodict为第一个参数。      &lt;/p&gt;
&lt;p&gt;其实还有很多魔术方法没有说，实在太多了，就总结到这吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Python的魔术在python中是比较有特色的部分，合理使用还会使程序变的更加简洁。今天我们就来介绍一下python的魔术方法&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://noble4cc.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noble4cc.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记-关机和重启</title>
    <link href="http://noble4cc.me/Linux-notes-Shutdown-and-restart%20/"/>
    <id>http://noble4cc.me/Linux-notes-Shutdown-and-restart /</id>
    <published>2015-07-12T19:20:00.000Z</published>
    <updated>2016-04-16T06:09:34.000Z</updated>
    
    <content type="html">&lt;p&gt;我们学习一种操作系统一开始肯定是学会怎样关机。习惯了win的同学可能一时对Linux下的关机感到束手无策。其实很简单，只有几个命令而已。但是随后你又会发现，为什么关机有很多命令呢？各种命令之间又有什么不同呢？下面我们详细介绍一下Linux的关机和重启命令。  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;shutdown&quot;&gt;&lt;a href=&quot;#shutdown&quot; class=&quot;headerlink&quot; title=&quot;shutdown&quot;&gt;&lt;/a&gt;shutdown&lt;/h3&gt;&lt;p&gt;想必这个命令大家一点都不陌生吧。这是我们在平常中最熟悉的命令了，就连win上的cmd也可以使用该命令。shutdown翻译过来就是关机的意思。该命令简单来说是安全关机。&lt;br&gt;也许有人要问什么是安全关机呢？当你的系统将要关机时，还有大量的进程运行着，比如vi正编辑的文档。要想关机，必须安全退出这些进程，防止数据的丢失。这就是安全关机。如果强制关机的话可能会丢失数据，甚至有可能会损坏硬件。shutdown命令执行后，login命令就被冻结了，也就是说，这时是无法进行登录操作的。下面引用网上的一段资料进行说明shutdown的工作过程：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;shutdown执行它的工作是送信号〔signal〕给init程序﹐要求它改变runlevel。Runlevel 0被用来停机〔halt〕﹐runlevel 6是用来重新激活〔reboot〕系统﹐而runlevel 1则是被用来让系统进入管理工作可以进行的状态﹔这是预设的﹐假定没有-h也没有-r参数给shutdown。要想了解在停机〔halt〕或者重新开机〔reboot〕过程中做了哪些动作﹐你可以在这个文件/etc/inittab里看到这些runlevels相关的资料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;shutdown 参数说明:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[-t] 在改变到其它runlevel之前﹐告诉init多久以后关机。&lt;/li&gt;
&lt;li&gt;[-r] 重启计算机。&lt;/li&gt;
&lt;li&gt;[-k] 并不真正关机﹐只是送警告信号给每位登录者〔login〕。&lt;/li&gt;
&lt;li&gt;[-h] 关机后关闭电源〔halt〕。&lt;/li&gt;
&lt;li&gt;[-n] 不用init﹐而是自己来关机。不鼓励使用这个选项﹐而且该选项所产生的后果往往不总是你所预期得到的。&lt;br&gt;*[-c] cancel current process取消目前正在执行的关机程序。所以这个选项当然没有时间参数﹐但是可以输入一个用来解释的讯息﹐而这信息将会送到每位使用者。&lt;/li&gt;
&lt;li&gt;[-f] 在重启计算器〔reboot〕时忽略fsck。&lt;/li&gt;
&lt;li&gt;[-F] 在重启计算器〔reboot〕时强迫fsck。&lt;/li&gt;
&lt;li&gt;[-time] 设定关机〔shutdown〕前的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;马上关机&lt;br&gt;shutdown -h now&lt;br&gt;系统2分钟后重新启动，其中+m表示几分钟后关机或开机&lt;br&gt;shutdown -h +2&lt;br&gt;设置系统在那个时间点关机&lt;br&gt;shutdown -h 12:30&lt;br&gt;将前一个shutdown命令取消息&lt;br&gt;Ctrl+c&lt;br&gt;向所有登录的用户发出信息&lt;br&gt;shutdown -k “now”&lt;br&gt;重新启动时不进行磁盘检测&lt;br&gt;shutdown -fr now&lt;br&gt;在多少秒后关闭系统并给用户发送提示信息&lt;br&gt;shutdown -t 10 -h now “System will shutdown 10 sencond later”&lt;/p&gt;
&lt;h3 id=&quot;halt&quot;&gt;&lt;a href=&quot;#halt&quot; class=&quot;headerlink&quot; title=&quot;halt&quot;&gt;&lt;/a&gt;halt&lt;/h3&gt;&lt;p&gt;至于halt命令想必大家比较陌生一些，其实这个命令是调用shutdown的。halt执行时﹐杀死应用进程﹐执行sync系统调用﹐文件系统写操作完成后就会停止内核。&lt;br&gt;参数说明:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[-n] 防止sync系统调用﹐它用在用fsck修补根分区之后﹐以阻止内核用老版本的超级块〔superblock〕覆盖修补过的超级块。&lt;/li&gt;
&lt;li&gt;[-w] 并不是真正的重启或关机﹐只是写wtmp〔/var/log/wtmp〕纪录。&lt;/li&gt;
&lt;li&gt;[-d] 不写wtmp纪录〔已包含在选项[-n]中〕。&lt;/li&gt;
&lt;li&gt;[-f] 没有调用shutdown而强制关机或重启。&lt;/li&gt;
&lt;li&gt;[-i] 关机〔或重启〕前﹐关掉所有的网络接口。&lt;/li&gt;
&lt;li&gt;[-p] 该选项为缺省选项。就是关机时调用poweroff。 　&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;reboot&quot;&gt;&lt;a href=&quot;#reboot&quot; class=&quot;headerlink&quot; title=&quot;reboot&quot;&gt;&lt;/a&gt;reboot&lt;/h3&gt;&lt;p&gt;Linux reboot命令用于用来重新启动计算机。若系统的 runlevel 为 0 或 6 ，则重新开机，否则以 shutdown 指令（加上 -r 参数）来取代&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-n : 在重开机前不做将记忆体资料写回硬盘的动作&lt;/li&gt;
&lt;li&gt;-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里&lt;/li&gt;
&lt;li&gt;-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）&lt;/li&gt;
&lt;li&gt;-f : 强迫重开机，不呼叫 shutdown 这个指令&lt;/li&gt;
&lt;li&gt;-i : 在重开机之前先把所有网络相关的装置先停止&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h3&gt;&lt;p&gt;init是所有进程的祖先﹐它的进程号始终为1﹐所以发送TERM信号给init会终止所有的用户进程﹑守护进程等。shutdown就是使用这种机制。init定义了8个运行级别(runlevel)，init 0为关机﹐init1为重启。关于init可以长篇大论﹐这里就不再叙述。另外还有telinit命令可以改变init的运行级别﹐比如﹐telinit -iS可使系统进入单用户模式﹐并且得不到使用shutdown时的信息和等待时间。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们学习一种操作系统一开始肯定是学会怎样关机。习惯了win的同学可能一时对Linux下的关机感到束手无策。其实很简单，只有几个命令而已。但是随后你又会发现，为什么关机有很多命令呢？各种命令之间又有什么不同呢？下面我们详细介绍一下Linux的关机和重启命令。  &lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记-链接</title>
    <link href="http://noble4cc.me/Linux-notes-link/"/>
    <id>http://noble4cc.me/Linux-notes-link/</id>
    <published>2015-06-23T09:14:00.000Z</published>
    <updated>2016-04-16T06:09:27.000Z</updated>
    
    <content type="html">&lt;p&gt;Linux存在两种链接—硬链接和软链接，链接通过ln命令创建，ln默认创建的时硬链接。今天我们详细述说连接。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;硬链接&quot;&gt;&lt;a href=&quot;#硬链接&quot; class=&quot;headerlink&quot; title=&quot;硬链接&quot;&gt;&lt;/a&gt;硬链接&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; 介绍&lt;/strong&gt;&lt;br&gt;再讲硬链接之前我们先说说inode。什么是inode：&lt;br&gt;inode中文名字叫做索引节点。用于存储文件的元信息。硬盘最小单位是扇区（不知道扇区的请自行百度），用扇区查找文件效率低，所以我们将几个扇区集合成块，扇区组成的块是文件存取的最小单位，最常见的扇区的大小是4KB。那么文件就是存储在块中。我们还必须找个地方存储文件的元信息（文件的所有者、创建日期….)这部分信息就存储到inode中。&lt;br&gt;inode的具体内容包括：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件的字节数&lt;/li&gt;
&lt;li&gt;文件拥有者的User ID&lt;/li&gt;
&lt;li&gt;文件的Group ID&lt;/li&gt;
&lt;li&gt;文件的读、写、执行权限&lt;/li&gt;
&lt;li&gt;文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。&lt;/li&gt;
&lt;li&gt;链接数，即有多少文件名指向这个inode&lt;/li&gt;
&lt;li&gt;文件数据block的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用stat命令查看文件的inode，如：  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# stat 1.mp3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6784127 1.mp3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般情况下，一个文件对应着一个inode，但是Linux允许多个文件名指向同一个inode。也就是说你可以通过不同的文件名访问相同的文件，修改后是会影响两个文件名的，但是删除不会影响另外一个文件名的访问，这种情况就是硬链接。其实，硬链接是防止误删的一种手段。&lt;br&gt;硬链接有两个限制：  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;不允许给目录创建硬链接`   
&lt;/em&gt;只有在同一文件系统中的文件之间才能创建链接，即不同硬盘分区上的两个文件之间不能够建立硬链接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;br&gt;我们创建一个文件f1，然后为f1创建一个硬链接f2,并使用ls-i命令查看文件的indeo索引号，我们会发现f1和f2的inode索引号是一样的：  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# touch f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ln f1 f2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls -li&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8245728 -rw-r--r--   2 cc959798  staff        0  4 16 14:30 f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8245728 -rw-r--r--   2 cc959798  staff        0  4 16 14:30 f2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们在f1中写入信息，分别 通过不同路径访问 该文件，然后发现里面存入的信息是一样的，然后我们删除文件f1，发现我们还可以通过f2进行访问。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# echo &amp;quot;this is f1&amp;quot; &amp;gt;&amp;gt; f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat f1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat f2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# rm f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat f2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is f1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###软链接&lt;br&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;软链接其实很简单，我们可以理解为windows下的快捷方式。两个文件的indoe是不一样的，但是软链接文件存储的其实是另外一个文件的路径，访问软链接文件时其实是访问的指向的文件。软连接也叫符号连接。软链接文件依赖原来定的文件，如果指向的文件被删除了，打开软连接文件会提示：No such file or directory。&lt;br&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;br&gt;创建软连接也是使用ln 但是必须加上 -s选项,通过ls -li我们发现f2是指向f1的，而且两个文件的inode是不一样的，使用cat命令访问f2，看到的是f1的信息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# touch f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ln -s f1 f2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8246988 -rw-r--r--   1 cc959798  staff        0  4 16 14:54 f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8247029 lrwxr-xr-x   1 cc959798  staff        2  4 16 14:55 f2 -&amp;gt; f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# echo &amp;quot;this is f1&amp;quot; &amp;gt;&amp;gt; f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat f2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is f1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux存在两种链接—硬链接和软链接，链接通过ln命令创建，ln默认创建的时硬链接。今天我们详细述说连接。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C++笔记-文件I/O操作</title>
    <link href="http://noble4cc.me/C++-notes-file-IO-operation/"/>
    <id>http://noble4cc.me/C++-notes-file-IO-operation/</id>
    <published>2015-06-14T01:10:00.000Z</published>
    <updated>2016-04-16T06:08:23.000Z</updated>
    
    <content type="html">&lt;p&gt;使使用一门语言，肯定会碰到处理文件的操作，我们在c++中也不例外，c++的文件操作相当的简洁（甚至觉得过于简单）。做过java的同学肯定对流的概念不陌生，c++中也存在着流的概念，c++的文件操作是依靠流来完成的，今天我们就详细说一下，文件的操作。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;C-中的流&quot;&gt;&lt;a href=&quot;#C-中的流&quot; class=&quot;headerlink&quot; title=&quot;C++中的流&quot;&gt;&lt;/a&gt;C++中的流&lt;/h3&gt;&lt;p&gt;在程序设计中，数据输入/输出（I/O）操作是必不可少的，C++语言的数据输入/输出操作是通过I/O流库来实现的。C++中把数据之间的传输操作称为流，流既可以表示数据从内存传送到某个载体或设备中，即输出流，也可以表示数据从某个载体或设备传送到内存缓冲区变量中，即输入流。&lt;br&gt;C++流涉及以下概念：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准I/O流：内存与标准输入输出设备之间信息的传递；&lt;/li&gt;
&lt;li&gt;文件I/O流：内存与外部文件之间信息的传递；&lt;/li&gt;
&lt;li&gt;字符串I/O流：内存变量与表示字符串流的字符数组之间信息的传递。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;STL中定义的流类:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;流类分类&lt;/th&gt;
&lt;th&gt;流类名称&lt;/th&gt;
&lt;th&gt;流类作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;流基类&lt;/td&gt;
&lt;td&gt;ios&lt;/td&gt;
&lt;td&gt;所有流类的父类，保存流的状态并处理错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入流类&lt;/td&gt;
&lt;td&gt;istream&lt;/td&gt;
&lt;td&gt;输入流基类，将流缓冲区中的数据作格式化和非格式化之间的转换并输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ifstream&lt;/td&gt;
&lt;td&gt;文件输入流类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;istream_withassign&lt;/td&gt;
&lt;td&gt;cin输入流类，即操作符&amp;gt;&amp;gt;输入流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;istrstream&lt;/td&gt;
&lt;td&gt;串输入流类, 基于C类型字符串char*编写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;istringstream&lt;/td&gt;
&lt;td&gt;串输入流类, 基于std::string编写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输出流类&lt;/td&gt;
&lt;td&gt;ostream&lt;/td&gt;
&lt;td&gt;输出流基类，将流缓冲区中的数据作格式化和非格式化之间的转换。并输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ofstream&lt;/td&gt;
&lt;td&gt;文件输出流类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ostream_withassign&lt;/td&gt;
&lt;td&gt;Cout、cerr、clog的输出流类，即操作符&amp;lt;&amp;lt;输出流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ostrstream&lt;/td&gt;
&lt;td&gt;串输入流类, 基于C类型字符串char*编写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ostringstream&lt;/td&gt;
&lt;td&gt;串输入流类, 基于std::string编写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入/输出流类&lt;/td&gt;
&lt;td&gt;iostream&lt;/td&gt;
&lt;td&gt;多目的输入/输出流类的基类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;fstream&lt;/td&gt;
&lt;td&gt;文件流输入/输出类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;strstream&lt;/td&gt;
&lt;td&gt;串流输入/输出类, 基于C类型字符串char*编写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;stringstream&lt;/td&gt;
&lt;td&gt;串流输入/输出类, 基于std::string编写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1、插入器(&amp;lt;&amp;lt;)&lt;br&gt;向流输出数据。比如说系统有一个默认的标准输出流(cout)，一般情况下就是指的显示器，所以，cout&amp;lt;&amp;lt;”WriteStdout”&amp;lt;&amp;lt;’n’;就表示把字符串”Write Stdout”和换行字符(‘n’)输出到标准输出流。&lt;br&gt;2、析取器(&amp;gt;&amp;gt;)&lt;br&gt;从流中输入数据。比如说系统有一个默认的标准输入流(cin)，一般情况下就是指的键盘，所以，cin&amp;gt;&amp;gt;x;就表示从标准输入流中读取一个指定类型(即变量 x 的类型)的数据。在 C++ 中，对文件的操作是通过 stream的子类fstream(filestream)来实现的，所以，要用这种方式操作文件，就必须加入头文件 fstream.h。   &lt;/p&gt;
&lt;h3 id=&quot;C-文件操作&quot;&gt;&lt;a href=&quot;#C-文件操作&quot; class=&quot;headerlink&quot; title=&quot;C++文件操作&quot;&gt;&lt;/a&gt;C++文件操作&lt;/h3&gt;&lt;p&gt;我们先说一个非常重要的类fstream，所有文件的读写都学要这个类的支持。f是指file，stream是指流。其中有两个重要的子类ifstream和ofstream，分别是输入文件流类，输出文件流类。&lt;br&gt;&lt;strong&gt;重要的函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;void open (const char* filename,ios_base::openmode mode = ios_base::in | ios_base::out); //打开一个文件&lt;/li&gt;
&lt;li&gt;void open (const string&amp;amp; filename,ios_base::openmode mode = ios_base::in | ios_base::out); //仅在C++11中支持&lt;/li&gt;
&lt;li&gt;void close();//关闭文件&lt;/li&gt;
&lt;li&gt;bool is_open() const;//文件是否打开&lt;/li&gt;
&lt;li&gt;streamsize gcount() const;//获得文件字符的数量&lt;/li&gt;
&lt;li&gt;basic_istream&amp;amp; seekg (pos_type pos);//定位文件&lt;/li&gt;
&lt;li&gt;basic_istream&amp;amp; seekg (off_type off, ios_base::seekdir way);//定位文件&lt;/li&gt;
&lt;li&gt;basic_ostream&amp;amp; write (const char_type* s, streamsize n);//写文件&lt;/li&gt;
&lt;li&gt;basic_istream&amp;amp; read (char_type* s, streamsize n);//读文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以这样创建一个文件，然后打开它&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fstream file;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file.open(&amp;quot;file.txt&amp;quot;,ios::in|ios::out);//打开一个可读可写的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fstream file2(&amp;quot;file2.txt&amp;quot;,ios::in|ios::out);//也可以直接在构造函数中打开一个文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;open()函数的参数分别是文件的路径和打开的方式，打开的方式有：&lt;/li&gt;
&lt;li&gt;ios::app： 以追加的方式打开文件&lt;/li&gt;
&lt;li&gt;ios::ate： 文件打开后定位到文件尾，ios:app 就包含有此属性&lt;/li&gt;
&lt;li&gt;ios::binary： 以二进制方式打开文件，缺省的方式是文本方式。两种方式的区别见前文&lt;/li&gt;
&lt;li&gt;ios::in： 文件以输入方式打开&lt;/li&gt;
&lt;li&gt;ios::out： 文件以输出方式打开&lt;/li&gt;
&lt;li&gt;ios::nocreate： 不建立文件，所以文件不存在时打开失败&lt;/li&gt;
&lt;li&gt;ios::noreplace：不覆盖文件，所以打开文件时如果文件存在失败&lt;/li&gt;
&lt;li&gt;ios::trunc ： 如果文件存在，把文件长度设为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用“或”把以上属性连接起来，如 ios::out|ios::binary&lt;br&gt;对文件的操作最重要是读写，其实无论何种语言，读写方式无非两种，文本读写和二进制读写。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态标识&lt;/strong&gt;&lt;br&gt;我们可以通过以下函数获得状态表示：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eof()//到达文件末尾时返回true&lt;/li&gt;
&lt;li&gt;bad()//如果在读写过程中出错，返回 true 。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。&lt;/li&gt;
&lt;li&gt;fail()//除了与bad() 同样的情况下会返回 true 以外，加上格式错误时也返回true ，例如当想要读入一个整数，而获得了一个字母的时候。&lt;/li&gt;
&lt;li&gt;good()//这是最通用的：如果调用以上任何一个函数返回true 的话，此函数返回 false 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;文本读写&lt;/strong&gt;&lt;br&gt;我们在执行文本读写时，使用操作符&amp;lt;&amp;lt;(写入)和&amp;gt;&amp;gt;(读出)来完成。当读出一个字符串时，遇到空格，就结束读取。&lt;br&gt;通过这种方式我们还可以插入指定的操作符来完成相应的功能：  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操纵符&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;输入/输出&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dec&lt;/td&gt;
&lt;td&gt;格式化为十进制数值数据&lt;/td&gt;
&lt;td&gt;输入和输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;endl&lt;/td&gt;
&lt;td&gt;输出一个换行符并刷新此流&lt;/td&gt;
&lt;td&gt;输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ends&lt;/td&gt;
&lt;td&gt;输出一个空字符&lt;/td&gt;
&lt;td&gt;输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hex&lt;/td&gt;
&lt;td&gt;格式化为十六进制数值数据&lt;/td&gt;
&lt;td&gt;输入和输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oct&lt;/td&gt;
&lt;td&gt;格式化为八进制数值数据&lt;/td&gt;
&lt;td&gt;输入和输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setpxecision(int p)&lt;/td&gt;
&lt;td&gt;设置浮点数的精度位数&lt;/td&gt;
&lt;td&gt;输出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;file&amp;lt;&amp;lt;”hello wolrd”;&lt;br&gt;string str;&lt;br&gt;filke&amp;gt;&amp;gt;str;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二进制读写&lt;/strong&gt;&lt;br&gt;二进制读写使用&amp;gt;&amp;gt;和&amp;lt;&amp;lt;还有getLine()虽然是合法的，但是是没有意义的。&lt;br&gt;put()函数，每次写入一个字符&lt;br&gt;file.put(‘c’);&lt;br&gt;get()函数有三种常用的使用方式，ifstream &amp;amp;get(char &amp;amp;ch);功能是从流中读取一个字符，结果保存在引用 ch中，如果到文件尾，返回空字符。&lt;br&gt;int get();这种形式是从流中返回一个字符，如果到达文件尾，返回 EOF&lt;br&gt;ifstream &amp;amp;get(char &lt;em&gt;buf,int num,char delim=’n’) ；这种形式把字符读入由 buf 指向的数组，直到读入了 num 个字符或遇到了由 delim 指定的字符，如果没使用 delim 这个参数，将使用缺省值换行符’\n’。&lt;br&gt;write()/read(),分别是一次写入指定长度的字符串和写入指定长度的字符串。&lt;br&gt;&lt;em&gt;*文件定位&lt;/em&gt;&lt;/em&gt;&lt;br&gt;C+ +的文件定位分为读位置和写位置的定位,对应 的成员函数是 seekg()和 seekp(),seekg()是设置读位置,seekp 是设置写位置。它们最通用的形式如下:&lt;br&gt;istream &amp;amp;seekg(streamoff offset,seek_dir origin);&lt;br&gt;ostream &amp;amp;seekp(streamoff offset,seek_dir origin);&lt;br&gt;这两个函数的参数分别是偏移量和源位置，其中偏移量默认是0，源位置可以是以下三种：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ios::beg: 文件开头&lt;/li&gt;
&lt;li&gt;ios::cur : 文件当前&lt;/li&gt;
&lt;li&gt;ios::end : 文件结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tellg() 和 tellp()&lt;br&gt;这两个成员函数不用传入参数，返回pos_type 类型的值(根据ANSI-C++ 标准) ，就是一个整数，代表当前get 流指针的位置 (用tellg) 或 put 流指针的位置(用tellp).&lt;br&gt;示例代码：  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fstream file;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file.open(&lt;span class=&quot;string&quot;&gt;&quot;./file.txt&quot;&lt;/span&gt;,ios::out);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fstream file2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file2.open(&lt;span class=&quot;string&quot;&gt;&quot;./file.txt&quot;&lt;/span&gt;,ios::in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!file2.eof()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        file2&amp;gt;&amp;gt;str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;str&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file2.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file2.open(&lt;span class=&quot;string&quot;&gt;&quot;./file.txt&quot;&lt;/span&gt;,ios::in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file2.getline(str,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;str&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file2.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;fstream &lt;span class=&quot;title&quot;&gt;file3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./file.txt&quot;&lt;/span&gt;,ios::out|ios::binary)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str2=&lt;span class=&quot;string&quot;&gt;&quot;hello c++&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;=&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(str2);i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        file3.put(*(str2+i));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file3.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file3.open(&lt;span class=&quot;string&quot;&gt;&quot;./file.txt&quot;&lt;/span&gt;,ios::in|ios::binary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!file3.eof())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c=file3.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c==EOF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file3.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;fstream &lt;span class=&quot;title&quot;&gt;file4&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./file4.txt&quot;&lt;/span&gt;,ios::in|ios::out|ios::binary)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str3=&lt;span class=&quot;string&quot;&gt;&quot;hello c++,you are powerful&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file4.write(str3,&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(str3)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file4.seekg(ios::beg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file4.read(buffer,&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(str3)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file4.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使使用一门语言，肯定会碰到处理文件的操作，我们在c++中也不例外，c++的文件操作相当的简洁（甚至觉得过于简单）。做过java的同学肯定对流的概念不陌生，c++中也存在着流的概念，c++的文件操作是依靠流来完成的，今天我们就详细说一下，文件的操作。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://noble4cc.me/categories/C/"/>
    
    
      <category term="C++" scheme="http://noble4cc.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记-压缩和解压缩</title>
    <link href="http://noble4cc.me/Linux-notes-compression-and-decompression/"/>
    <id>http://noble4cc.me/Linux-notes-compression-and-decompression/</id>
    <published>2015-05-31T23:30:00.000Z</published>
    <updated>2016-04-16T06:09:18.000Z</updated>
    
    <content type="html">&lt;p&gt;学习Linux已经有一段时间了，虽然以前很早就接触过，但是都不怎么系统。我们在平常的使用过程中经常会使用压缩软件解压或者压缩文件，常见的压缩格式在有zip、7z、rar。在win下有很多花花绿绿的软件可以使用，早些年的winzip，老牌winrar，开源的7zip，但是这些软件都是有图形化的，在Linux下CLI是无法使用，好在强大的Linux拥有很多好用的工具提供压缩和解压缩。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Linux压缩格式&quot;&gt;&lt;a href=&quot;#Linux压缩格式&quot; class=&quot;headerlink&quot; title=&quot;Linux压缩格式&quot;&gt;&lt;/a&gt;Linux压缩格式&lt;/h3&gt;&lt;p&gt;对于用惯了win的同学一定对Linux下的一堆压缩文件的格式搞的头大，在win下常用的又zip、rar外加一个7z。而在Linux下有gz、.tar.gz、tgz、bz2、.Z、.tar,而且大多是没见过的。前面的三种在Linux下也能使用，但是使用相对来说较少。&lt;br&gt;先说明两个概念，打包和压缩。这两个是不一样的概念，打包简单来讲是将一对文件合并成一个文件，形成一个包，压缩是指讲一个文件的体积缩小。其实很多Linux压缩程序只支持压缩一个文件，所以很多压缩命令是要借助打包工具的。&lt;br&gt;Linux下最常用的是tar这个打包工具。生成的包是*.tar格式的。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gzip:gzip是GNU组织开发的一个压缩程序，.gz结尾的文件就是gzip压缩的结果。与gzip相对的解压程序是gunzip。tar中使用-z这个参数来调用gzip。&lt;/li&gt;
&lt;li&gt;bzip2:bzip2是一个压缩能力更强的压缩程序，.bz2结尾的文件就是bzip2压缩的结果。与bzip2相对的解压程序是bunzip2。tar中使用-j这个参数来调用gzip。&lt;/li&gt;
&lt;li&gt;compress:compress也是一个压缩程序，但是好象使用compress的人不如gzip和bzip2的人多。.Z结尾的文件就是compress压缩的结果。与 compress相对的解压程序是uncompress。tar中使用-Z这个参数来调用compress。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;压缩解压命令&quot;&gt;&lt;a href=&quot;#压缩解压命令&quot; class=&quot;headerlink&quot; title=&quot;压缩解压命令&quot;&gt;&lt;/a&gt;压缩解压命令&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;tar&lt;/strong&gt;&lt;br&gt;tar可以为文件和目录创建档案。利用tar，用户可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar 最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案，如软盘。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文 件或将几个文件组合成为一个文件以便于网络传输是非常有用的。Linux上的tar是GNU版本的。&lt;br&gt;&lt;code&gt;语法：tar [主选项+辅选项] 文件或者目录&lt;/code&gt;&lt;br&gt;使用该命令时，主选项是必须要有的，它告诉tar要做什么事情，辅选项是辅助使用的，可以选用。&lt;br&gt;主选项：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。&lt;/li&gt;
&lt;li&gt;r 把要存档的文件追加到档案文件的未尾。例如用户已经作好备份文件，又发现还有一个目录或是一些文件忘记备份了，这时可以使用该选项，将忘记的目录或文件追加到备份文件中。&lt;/li&gt;
&lt;li&gt;t 列出档案文件的内容，查看已经备份了哪些文件。&lt;/li&gt;
&lt;li&gt;u 更新文件。就是说，用新增的文件取代原备份文件，如果在备份文件中找不到要更新的文件，则把它追加到备份文件的最后。&lt;/li&gt;
&lt;li&gt;x 从档案文件中释放文件。&lt;br&gt;辅助选项：&lt;/li&gt;
&lt;li&gt;b 该选项是为磁带机设定的。其后跟一数字，用来说明区块的大小，系统预设值为20（20*512 bytes）。&lt;/li&gt;
&lt;li&gt;f 使用档案文件或设备，这个选项通常是必选的。&lt;br&gt;k 保存已经存在的文件。例如我们把某个文件还原，在还原的过程中，遇到相同的文件，不会进行覆盖。&lt;/li&gt;
&lt;li&gt;m 在还原文件时，把所有文件的修改时间设定为现在。&lt;/li&gt;
&lt;li&gt;M 创建多卷的档案文件，以便在几个磁盘中存放。&lt;/li&gt;
&lt;li&gt;v 详细报告tar处理的文件信息。如无此选项，tar不报告文件信息。&lt;/li&gt;
&lt;li&gt;w 每一步都要求确认。&lt;/li&gt;
&lt;li&gt;z 用gzip来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压缩。&lt;br&gt;我们使用-cf 选项可以新建一个tar，-c是新文件 -f是制定文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# tar -cf png.tar *.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.png  2.png  files  png.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用-rf选项可以往tar包内追加文件， -r表示增加文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# touch 3.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# tar -rf png.tar 3.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# tar -tf png.tar &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用-uf可以更新tar包内的文件， -u是更新  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# tar -uf png.tar 3.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用-tf可以列出tar包内的文件， -t是列出文件  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# tar -tf png.tar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用-xf 可以解包文件 -x解包  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# rm 1.png 2.png 3.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# tar -xf png.tar &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.png  2.png  3.png  files  png.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 -czf 生成gzip的压缩包，-xzf解压缩gzip，-cjf生成bzip2的压缩包，-xjf解压缩bzip2压缩包，-cZf生成compress的压缩包，-xZf解压compress的压缩包(ubuntu 上没有安装compress，需要自己手动安装)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# tar -czf png.tar.gz *.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# tar -cjf png.tar.gz *.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# tar -cZf png.tar.gz *.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.png  2.png  3.png  files  png.tar  png.tar.bz2  png.tar.gz  png.tar.Z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;rar&lt;/strong&gt;&lt;br&gt;rar在win上是非常常见的格式，它比zip和7z压缩比率要高，在win下要压缩rar，必须安装WinRAR这款软件。其实这个rar软件是收费的，但是国内D版横行，人们好像已经无视了。在Linux下压缩rar也必须安装Linux版的rar和unrar（解压缩）。&lt;br&gt;由于rar在Linux上不常用，我们只是简单的介绍一下。&lt;br&gt;使用 a选选项压缩文件，e选项解压文件-vSIZE选项添加压缩分卷的大小注意a和e没有-,而且rar程序会自动添加文件扩展名。unrar e和rar e效果是一样的。  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rar a png *.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rar e png.rar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;7z&lt;/strong&gt;&lt;br&gt;7z是个开源的压缩格式，在win上也有对应的开源压缩软件—7z。在Linux上也有Linux的版本，注意Ubuntu默认是没有安装7z的，需要手动安装。使用a选项压缩文件，x解压软件，-vSIZE添加压缩分卷的大小  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7z a png.7z *.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7z x png.7z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;zip&lt;/strong&gt;&lt;br&gt;最后是在win上嘴常用的zip，相比大家都不陌生是吧。使用也比较简单。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zip png.zip *.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unzip png.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学习Linux已经有一段时间了，虽然以前很早就接触过，但是都不怎么系统。我们在平常的使用过程中经常会使用压缩软件解压或者压缩文件，常见的压缩格式在有zip、7z、rar。在win下有很多花花绿绿的软件可以使用，早些年的winzip，老牌winrar，开源的7zip，但是这些软件都是有图形化的，在Linux下CLI是无法使用，好在强大的Linux拥有很多好用的工具提供压缩和解压缩。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记-常用命令</title>
    <link href="http://noble4cc.me/Linux-notes-commonly-used-commands/"/>
    <id>http://noble4cc.me/Linux-notes-commonly-used-commands/</id>
    <published>2015-05-21T01:10:00.000Z</published>
    <updated>2016-04-16T06:09:12.000Z</updated>
    
    <content type="html">&lt;p&gt;Linux命令在命令行下是异常强大的，熟练使用这些命令会大大提高你的效率，让使用linux得心应手，但是习惯了（或者说是惯坏了）windows下的图形化操作的我们，初次接触Linux命令显然是很吃力的，话说Linux命令具体有多少呢？其实这个数字很大，而且也在不断增加当中，但是我们不必畏惧Linux的命令繁多，其实平常常用的命令也就200+，只要掌握常用的命令一样可以玩转Linux。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;br&gt;ls命令应该是是使用频率最高的命令了，命令的功能是列出当前目录下的文件和目录名，ls也有很多参数，我们只说常用的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-l：显示成列表状&lt;/li&gt;
&lt;li&gt;-a显示所有文件和目录，包括隐藏的部分&lt;/li&gt;
&lt;li&gt;-t：按文件的修改时间列举文件，最近修改的在前&lt;/li&gt;
&lt;li&gt;-r：以相反顺序列举文件&lt;/li&gt;
&lt;li&gt;-F：可视化显示文件类型。不是真正的可视化，使用一些符号代表文件的类型。/是目录 nothing是普通文件 @是符号链接文件 *是可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，Linux命令的选项是可以组合的，ls也不例外，例如：ls -la&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#  ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo     pic.png  test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#  ls -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x  2 cc959798  staff  68  4 27 15:53 demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--  1 cc959798  staff   0  4 27 15:53 pic.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--  1 cc959798  staff   0  4 27 15:53 test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#  ls -la&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x   5 cc959798  staff   170  4 27 15:53 .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x+ 63 cc959798  staff  2142  4 27 15:54 ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x   2 cc959798  staff    68  4 27 15:53 demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--   1 cc959798  staff     0  4 27 15:53 pic.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--   1 cc959798  staff     0  4 27 15:53 test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#  ls -F&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo/     pic.png   test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#  ls -t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo     pic.png  test.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#  ls -r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test.txt pic.png  demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;cd&lt;/strong&gt;&lt;br&gt;cd命令和ls一样常用，改命令功能更换工作目录。说白了就是更换进入某个文件夹。cd命令使用比较简单，使用cd / 进入根目录，使用cd ..进入上级目录，使用cd ~进入家目录（就是当前登陆用户的home目录）  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cd /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cd ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.mp3              Downloads          Music              Sites&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Applications       FarBox             NoblePlayer        node_modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Desktop            Library            Pictures           test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Documents          Movies             Public             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; user&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;pwd&lt;/strong&gt;&lt;br&gt;pwd命令式显示当前工作目录  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;mkdir&lt;/strong&gt;&lt;br&gt;用于创建目录的命令，mkdir 只有一个选项-p，加入该选项后，如果指定的目录不存在的话，就创建一个。  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mkdir demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;cp&lt;/strong&gt;&lt;br&gt;cp命令用于拷贝文件或者目录，cp有几个比较多的命令和选项。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 保留链接和文件属性，递归拷贝目录，相当于下面的d、p、r三个选项组合。&lt;/li&gt;
&lt;li&gt;d 拷贝时保留链接。&lt;/li&gt;
&lt;li&gt;f 删除已经存在目标文件而不提示。&lt;/li&gt;
&lt;li&gt;i 覆盖目标文件前将给出确认提示，属交互式拷贝。&lt;/li&gt;
&lt;li&gt;p 复制源文件内容后，还将把其修改时间和访问权限也复制到新文件中。&lt;/li&gt;
&lt;li&gt;r 若源文件是一目录文件，此时cp将递归复制该目录下所有的子目录和文件。当然，目标文件必须为一个目录名。&lt;/li&gt;
&lt;li&gt;l 不作拷贝，只是链接文件。&lt;/li&gt;
&lt;li&gt;-s 复制成符号连结文件 (symbolic link)，亦即‘快捷方式’。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cp pic.png demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cp -rf demo demo2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;demo     demo2    pic.ln   pic.png  test.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;mv&lt;/strong&gt;&lt;br&gt;mv命令其实是move的缩写，它能移动或重命名文件和文件夹，格式如下：&lt;br&gt;mv [选项] 源文件或目录 目标文件或目录&lt;br&gt;为什么有重名名的功能呢？其实mv命令指示移动，当前后两个路径在同一目录下时，就成了重命名了，是不是很强大，所以linux下没有专门的重命名命令  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-b ：若需覆盖文件，则覆盖前先行备份。&lt;/li&gt;
&lt;li&gt;-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；&lt;/li&gt;
&lt;li&gt;-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！&lt;/li&gt;
&lt;li&gt;-u ：若目标文件已经存在，且 source 比较新，才会更新(update)&lt;/li&gt;
&lt;li&gt;-t ： —target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dir  file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# mv file file2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dir   file2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# mv dir dir2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dir2  file2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;rm&lt;/strong&gt;&lt;br&gt;rm是删除命令，是remove的缩写，无论是文件还是目录，都能删除，但是目录必须加上-r递归删除  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-f 强制删除，忽略不存在的文件，从不给出提示。&lt;/li&gt;
&lt;li&gt;-i 交互模式删除文件，删除文件前给出提示。&lt;/li&gt;
&lt;li&gt;-r 递归的删除目录下面文件以及子目录下文件。&lt;/li&gt;
&lt;li&gt;-R 递归的删除目录下面文件以及子目录下文件。&lt;/li&gt;
&lt;li&gt;-v 显示运行时详细信息&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dir2 file2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# rm file2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# rm -r dir2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;cat&lt;/strong&gt;&lt;br&gt;cat是比较常用的命令了。主要功能是三个，查看文件的内容，新建一个文件，合并文件。在我们想查看一个文件的内容时，vi是我们比较常用的操作，但是vi是文本编辑器，不光能查看文件，还能修改文件，如果一个文件比较重要的话，很容易引起错误修改。cat就不存在这个问题，cat只是只读而已。&lt;br&gt;预览文件：cat filename&lt;br&gt;新建文件：cat &amp;gt;filename 按Ctrl+D保存&lt;br&gt;合并文件：cat file1 file2&amp;gt;file  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# cat file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat &amp;gt;file2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat file file2&amp;gt;file3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat file3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;more&lt;/strong&gt;&lt;br&gt;more命令，功能类似 cat ，cat命令是整个文件的内容从上到下显示在屏幕上。 more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能 。more命令从前向后读取文件，因此在启动时就加载整个文件。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+n 从笫n行开始显示&lt;/li&gt;
&lt;li&gt;-n 定义屏幕大小为n行&lt;/li&gt;
&lt;li&gt;+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示&lt;/li&gt;
&lt;li&gt;-c 从顶部清屏，然后显示&lt;/li&gt;
&lt;li&gt;-d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能&lt;/li&gt;
&lt;li&gt;-l 忽略Ctrl+l（换页）字符&lt;/li&gt;
&lt;li&gt;-p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似&lt;/li&gt;
&lt;li&gt;-s 把连续的多个空行显示为一行&lt;/li&gt;
&lt;li&gt;-u 把文件内容中的下画线去掉&lt;/li&gt;
&lt;li&gt;类似于vi，more还支持输入命令，常用命令有：&lt;/li&gt;
&lt;li&gt;Enter 向下n行，需要定义。默认为1行&lt;/li&gt;
&lt;li&gt;Ctrl+F 向下滚动一屏&lt;/li&gt;
&lt;li&gt;空格键 向下滚动一屏&lt;/li&gt;
&lt;li&gt;Ctrl+B 返回上一屏&lt;/li&gt;
&lt;li&gt;= 输出当前行的行号&lt;/li&gt;
&lt;li&gt;：f 输出文件名和当前行的行号&lt;/li&gt;
&lt;li&gt;V 调用vi编辑器&lt;/li&gt;
&lt;li&gt;!命令 调用Shell，并执行命令&lt;/li&gt;
&lt;li&gt;q 退出more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;less&lt;/strong&gt;&lt;br&gt;less命令可以对文件或其它输出进行分页显示，与moe命令相似，但是比more命令要强大许多。&lt;br&gt;常用命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空格 space ： 向下翻一页&lt;/li&gt;
&lt;li&gt;Enter ： 向下一行&lt;/li&gt;
&lt;li&gt;[PageDown] ： 向下一页:&lt;/li&gt;
&lt;li&gt;[PageUp] ： 向上一页&lt;/li&gt;
&lt;li&gt;/字符串： 向下查询&lt;/li&gt;
&lt;li&gt;?字符串： 向上查询&lt;/li&gt;
&lt;li&gt;n ： 重复前一个查询 / 或 ?&lt;/li&gt;
&lt;li&gt;N ： 反向前一个查询 / 或 ?&lt;/li&gt;
&lt;li&gt;q ： 退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;head&lt;/strong&gt;&lt;br&gt;head命令及其简单，显示一个文本中头部开始指定的行数。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;q 隐藏文件名&lt;/li&gt;
&lt;li&gt;v 显示文件名&lt;/li&gt;
&lt;li&gt;c&amp;lt;字节&amp;gt; 显示字节数&lt;/li&gt;
&lt;li&gt;n&amp;lt;行数&amp;gt; 显示的行数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# head -n  5 file.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;tail&lt;/strong&gt;&lt;br&gt;tail命令是和head相对的命令，显示一个文本中尾部开始的指定行数  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f 循环读取&lt;/li&gt;
&lt;li&gt;q 不显示处理信息&lt;/li&gt;
&lt;li&gt;v 显示详细的处理信息&lt;/li&gt;
&lt;li&gt;c&amp;lt;数目&amp;gt; 显示的字节数&lt;/li&gt;
&lt;li&gt;n&amp;lt;行数&amp;gt; 显示行数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# tail -n 5 file.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;echo&lt;/strong&gt;&lt;br&gt;echo其实只有一个功能，就是打印信息，但是使用的方式比较灵活。比如打印一句话在屏幕上，或者说打印环境变量，在shell中输出信息和警告  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n 打印信息之后不换行。&lt;/li&gt;
&lt;li&gt;e 对字符串转义。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ehco &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# echo this is file &amp;gt;file.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat file.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# echo $SHELL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# echo -e &amp;quot;hello\nworld&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;jobs&lt;/strong&gt;&lt;br&gt;jobs命令用于显示当前终端关联的后台任务情况。说白了就是显示当前有什么执行任务？&lt;br&gt;我们在执行的命令后面跟上&amp;amp; 用于将命令在后台执行。&lt;br&gt;Ctrl+Z用于将当前正在运行的前台进程暂停，变成后台进程。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;l 显示进程组ID和作业在运行的目录。&lt;/li&gt;
&lt;li&gt;n 只显示上次显示过的已经停止的或已经退出的作业。&lt;/li&gt;
&lt;li&gt;p 只显示选定作业的进程组的进程ID.  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]  + suspended  ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# jobs -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]  + 25750 suspended  ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;ps&lt;/strong&gt;&lt;br&gt;ps是我们常用的命令，是打印当前进程的快照，注意只是快照，如果需要监控进程状态的话，我们需要top命令。&lt;br&gt;我们先认识一下Linux进程的状态：运行，中断，不可中断，僵死，停止。他们的状态码在ps中分别是：D、R、S、T、Z.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 显示所有进程&lt;/li&gt;
&lt;li&gt;-a 显示同一终端下的所有程序&lt;/li&gt;
&lt;li&gt;-A 显示所有进程&lt;/li&gt;
&lt;li&gt;c 显示进程的真实名称&lt;/li&gt;
&lt;li&gt;-N 反向选择&lt;/li&gt;
&lt;li&gt;-e 等于“-A”&lt;/li&gt;
&lt;li&gt;e 显示环境变量&lt;/li&gt;
&lt;li&gt;f 显示程序间的关系&lt;/li&gt;
&lt;li&gt;-H 显示树状结构&lt;/li&gt;
&lt;li&gt;r 显示当前终端的进程&lt;/li&gt;
&lt;li&gt;T 显示当前终端的所有程序&lt;/li&gt;
&lt;li&gt;u 指定用户的所有进程&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21525 ttys000    0:01.07 -zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]  + 24980 suspended  ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21525 ttys000    0:01.08 -zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24980 ttys000    0:00.00 ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ps a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21524 s000  Ss     0:00.13 login -fp cc959798&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21525 s000  S      0:01.08 -zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24980 s000  T      0:00.00 ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24999 s000  R+     0:00.00 ps a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ps c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PID   TT  STAT      TIME COMMAND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21525 s000  S      0:01.09 -zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24980 s000  T      0:00.00 ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;kill&lt;/strong&gt;&lt;br&gt;kill是杀死进程的命令，kill命令可以带信号号码选项，也可以不带。当然我们一般是使用Ctrl+C来结束前台进程的。root用户对所有用户进程有效，普通用户只能对自己的进程有效。 使用kill 0来终止所有由当前shell启动的进程。 我们不光可以使用PID杀死进程，还可以使用jobid，不过为了避免冲突，我们要在jobid前面加入%&lt;br&gt;格式：kill[参数][进程号]&lt;br&gt;只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。   下面是常用的信号：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HUP 1 终端断线&lt;/li&gt;
&lt;li&gt;INT 2 中断（同 Ctrl + C）&lt;/li&gt;
&lt;li&gt;QUIT 3 退出（同 Ctrl + \）&lt;/li&gt;
&lt;li&gt;TERM 15 终止&lt;/li&gt;
&lt;li&gt;KILL 9 强制终止&lt;/li&gt;
&lt;li&gt;CONT 18 继续（与STOP相反， fg/bg命令）&lt;/li&gt;
&lt;li&gt;STOP 19 暂停（同 Ctrl + Z）&lt;br&gt;常用参数：&lt;/li&gt;
&lt;li&gt;l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称&lt;/li&gt;
&lt;li&gt;a 当处理当前进程时，不限制命令名和进程号的对应关系&lt;/li&gt;
&lt;li&gt;p 指定kill 命令只打印相关进程的进程号，而不发送任何信号&lt;/li&gt;
&lt;li&gt;s 指定发送信号&lt;/li&gt;
&lt;li&gt;u 指定用户&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PID TTY           TIME CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21525 ttys000    0:01.36 -zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25668 ttys000    0:00.00 ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25684 ttys000    0:00.00 ping www.google.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# kill  25668&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2]  + suspended  ping www.google.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# kill %1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21525 ttys000    0:01.38 -zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# kill -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH INFO USR1 USR2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;bg&lt;/strong&gt;&lt;br&gt;将一个在后台暂停的命令，变成继续执行&lt;br&gt;如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2]  + suspended  ping www.google.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# bg %2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;fg&lt;/strong&gt;&lt;br&gt;fg命令很简单，其实是将在后台的任务拿到前台来执行。&lt;br&gt;格式：fg jobid  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]  + suspended  ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# fg %1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]  + 25900 continued  ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;top&lt;/strong&gt;&lt;br&gt;top命令经常用来监控linux的系统状况，比如cpu、内存的使用。就像我们的在windows上的任务管理器一样！程序员比较方便。  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;top - 17:25:07 up 42 min,  2 users,  load average: 0.12, 0.04, 0.05&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Tasks: 230 total,   1 running, 229 sleeping,   0 stopped,   0 zombie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%Cpu(s):  1.3 us,  0.8 sy,  0.0 ni, 97.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KiB Mem:   1371672 total,  1196484 used,   175188 free,   190336 buffers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KiB Swap:  1397756 total,     6048 used,  1391708 free.   407792 cached Mem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1024 root      20   0  187900  46268  21004 S   1.6  3.4   0:10.50 Xorg       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1872 cc959798  20   0  149652  46276  38188 S   1.6  3.4   0:01.43 fcitx-qimp+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 2465 cc959798  20   0  106896  31788  27232 S   1.6  2.3   0:00.89 gnome-term+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1 root      20   0   23652   4640   3524 S   0.0  0.3   0:01.91 systemd    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kthreadd   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3 root      20   0       0      0      0 S   0.0  0.0   0:01.03 ksoftirqd/0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    7 root      20   0       0      0      0 S   0.0  0.0   0:02.42 rcu_sched  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    9 root      rt   0       0      0      0 S   0.0  0.0   0:01.49 migration/0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   10 root      rt   0       0      0      0 S   0.0  0.0   0:00.01 watchdog/0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   11 root      rt   0       0      0      0 S   0.0  0.0   0:00.01 watchdog/1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   12 root      rt   0       0      0      0 S   0.0  0.0   0:00.48 migration/1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   13 root      20   0       0      0      0 S   0.0  0.0   0:00.81 ksoftirqd/1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   15 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   16 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 khelper    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   17 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kdevtmpfs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们来讲解一下top命令各个选项的含义（unix和linux下的top显示是不太一样的，不过区别不大）&lt;br&gt;第一行：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;17:25:07 当前系统时间&lt;/li&gt;
&lt;li&gt;up 42 min 系统已经运行了多长时间&lt;/li&gt;
&lt;li&gt;2 users 当前有2个用户登录系统&lt;/li&gt;
&lt;li&gt;load average: 0.12, 0.04, 0.05 load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。&lt;/li&gt;
&lt;li&gt;load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二行：&lt;br&gt;Tasks 任务（进程），系统现在共有230个进程，其中处于运行中的有1个，229个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。   &lt;/p&gt;
&lt;p&gt;第三行：cpu状态  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;us 用户空间占用CPU的百分比。&lt;/li&gt;
&lt;li&gt;sy 内核空间占用CPU的百分比。&lt;/li&gt;
&lt;li&gt;ni 改变过优先级的进程占用CPU的百分比&lt;/li&gt;
&lt;li&gt;id 空闲CPU百分比&lt;/li&gt;
&lt;li&gt;wa IO等待占用CPU的百分比&lt;/li&gt;
&lt;li&gt;hi 硬中断（Hardware IRQ）占用CPU的百分比&lt;/li&gt;
&lt;li&gt;si 软中断（Software Interrupts）占用CPU的百分比&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这里CPU的使用比率和windows概念不同，具体查看用户空间和内核空间&lt;br&gt;第四行：内存状态  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;total 物理内存总量（8GB）&lt;/li&gt;
&lt;li&gt;used 使用中的内存总量（7.7GB）&lt;/li&gt;
&lt;li&gt;free 空闲内存总量（530M）&lt;/li&gt;
&lt;li&gt;buffers 缓存的内存量 （79M）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第五行：swap交换分区&lt;br&gt;第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。&lt;br&gt;如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：530668+79236+4231276 = 4.7GB。&lt;br&gt;对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。&lt;br&gt;第七行以下：各进程（任务）的状态监控  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PID 进程id&lt;/li&gt;
&lt;li&gt;USER 进程所有者&lt;/li&gt;
&lt;li&gt;PR 进程优先级&lt;/li&gt;
&lt;li&gt;NI nice值。负值表示高优先级，正值表示低优先级&lt;/li&gt;
&lt;li&gt;VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES&lt;/li&gt;
&lt;li&gt;RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA&lt;/li&gt;
&lt;li&gt;SHR 共享内存大小，单位kb&lt;/li&gt;
&lt;li&gt;S 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程&lt;/li&gt;
&lt;li&gt;%CPU 上次更新到现在的CPU时间占用百分比&lt;/li&gt;
&lt;li&gt;%MEM 进程使用的物理内存百分比&lt;/li&gt;
&lt;li&gt;TIME+ 进程使用的CPU时间总计，单位1/100秒&lt;/li&gt;
&lt;li&gt;COMMAND 进程名称（命令名/命令行）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们也可以监控多个CPU的使用状态，按数字键上的1改变改变当前监控的CPU&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux命令在命令行下是异常强大的，熟练使用这些命令会大大提高你的效率，让使用linux得心应手，但是习惯了（或者说是惯坏了）windows下的图形化操作的我们，初次接触Linux命令显然是很吃力的，话说Linux命令具体有多少呢？其实这个数字很大，而且也在不断增加当中，但是我们不必畏惧Linux的命令繁多，其实平常常用的命令也就200+，只要掌握常用的命令一样可以玩转Linux。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C++笔记-C++11新特性之语法篇二</title>
    <link href="http://noble4cc.me/C++-notes-C++11-features-of-grammar-2/"/>
    <id>http://noble4cc.me/C++-notes-C++11-features-of-grammar-2/</id>
    <published>2015-05-16T00:40:00.000Z</published>
    <updated>2016-04-16T06:08:08.000Z</updated>
    
    <content type="html">&lt;p&gt;我们在前一篇博文中研究了C++11的部分语法新特性，每个特性做了示例，虽然不能包含全部的新特性的内容，但如果是入门的话还是比较明了的。今天我们把剩下的部分说完。有兴趣的同学可以参看我的上一篇博文&lt;a href=&quot;http://example.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++笔记-C++11新特性之语法篇一&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;非成员begin()和end()&lt;/strong&gt;&lt;br&gt;在STL的容器中几乎每个容器都存在着一个begin()和end()函数，分辨返回指向开头和结尾的迭代器，我想这对大家来说并不陌生。C++11推出了更加自由的函数：std:begin()和std:end()；我们可以这样将容器丢入函数中返回相应的迭代器。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v;&lt;span class=&quot;comment&quot;&gt;//STL容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//传统的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        v.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a[i]=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::for_each(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::begin(a),&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::end(a),[](int n)&amp;#123;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;n&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;);&lt;span class=&quot;comment&quot;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::for_each(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::begin(v),&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::end(v),[](int n)&amp;#123;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;n&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;static_assert&lt;/strong&gt;&lt;br&gt;static_assert是一个宏，停提供编译时断言，static_assert(常量表达式，提示字符串)。因为提供编译时断言，因此叫做静态断言，如果常量表达式是真的话，就什么都不做，如果是假的话，编译失败并且打印第二个参数。使用static_assert，我们可以在编译期间发现更多的错误，用编译器来强制保证一些契约，并帮助我们改善编译信息的可读性，尤其是用于模板的时候。static_assert可以用在全局作用域中，命名空间中，类作用域中，函数作用域中，几乎可以不受限制的使用。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static_assert&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(void*)==&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;this is 32bit platform&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//如果在32位机器上就什么都不做，编译成功，如果在64位机器上就编译失败，打印提示语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;decltype&lt;/strong&gt;&lt;br&gt;前面我们讲了auto，使用auto可以自动推断变量的类型，用来定义新的变量，decltype是一个新的C++关键字，用于得到表达式的类型，使用该类型可以创建新的变量。如果这个表达式是个函数，decltype 给出的类型为函数返回值的类型，decltype 不会执行表达式而auto会，他仅仅推论一下表达式的类型。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;func&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(i) j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(func()) k=&lt;span class=&quot;number&quot;&gt;3.14&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//你会观察到func并没有执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;j:&quot;&lt;/span&gt;&amp;lt;&amp;lt;j&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;k:&quot;&lt;/span&gt;&amp;lt;&amp;lt;k&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;move语义和完美转发&lt;/strong&gt;&lt;br&gt;std::move和std::forward是C++11中新增的标准库函数，分别用于实现移动语义和完美转发。&lt;br&gt;左值引用和右值引用：左值就是非临时对象，那些可以在多条语句中使用的对象。所有的变量都满足这个定义，在多条代码中都可以使用，都是左值。右值是指临时的对象，它们只在当前的语句中有效；左值是有名字的（通过其他具名对象间接得到的，例如通过返回引用的函数，或通过指针解引用(* 运算符)），有固定的存放数据的地址。而右值则是匿名的，相同的右值表达式多次引用，其位置（在寄存器中，或内存地址）不一定相同。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X a;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X&amp;amp;&amp;amp; b = move(a);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X&amp;amp;&amp;amp; c = move(X());  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;std::move是为性能而生的，正式因为了有了这个主动报告废弃物的设施，所以C++11中的STL性能大幅提升，即使C++用户仍然按找旧有的方式来编码，仍然能因中新版STL等标准库的强化中收益。&lt;br&gt;std::forward(u) 有两个参数：T 与 u。当T为左值引用类型时，u将被转换为T类型的左值，否则u将被转换为T类型右值。如此定义std::forward是为了在使用右值引用参数的函数模板中解决参数的完美转发问题。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; X &amp;#123;&amp;#125;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; X&amp;amp;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;inner(const X&amp;amp;)&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(X&amp;amp;&amp;amp;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;inner(X&amp;amp;&amp;amp;)&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T&amp;amp;&amp;amp; t)&lt;/span&gt; &lt;/span&gt;&amp;#123;inner(forward&amp;lt;T&amp;gt;(t));&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X a;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outer(a);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outer(X());  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inner(forward&amp;lt;X&amp;gt;(X()));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;变长参数的模板&lt;/strong&gt;&lt;br&gt;C++11中又了一种新的的机制，模板的参数是可变的，类似于C语言中的printf()函数。例如：&lt;br&gt;template class example(T arg,Args args){};其实这个特性是很新的，在以前的C++版本中是不支持的，说起可变参数，让我想起了C#，C#出名就在于语法糖特别甜，这样比较过来C++显然逊色很多，但各有各的优点，两者其实是不能做简单的比较的。不过现在看来C++11的确增加了很多的语法特性，但这也变相的提高了学习成本，语法太灵活也并不是一件绝对的好事，C++本来就是非常负载的工业级编程语言，委员会以刷版本，变得更加负载了，好在我们在实际的开发当中不会把所有的语法特性用上，新的语法要再实际中不断磨合，这样才能体现新特性的威力。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; T&amp;amp; t)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; t &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt;...Args&amp;gt; &lt;span class=&quot;comment&quot;&gt;//Args:模板参数包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; T&amp;amp; t, Args ...args)&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;//args:函数参数包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; t &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//打印1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func(args...);&lt;span class=&quot;comment&quot;&gt;//解参数包，等同于调用func(2),func(3),func(4),func(5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;str&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//调用模板&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样有没发现很方便，什么类型都可以装入函数内&lt;br&gt;&lt;strong&gt;更加优雅的初始化方法&lt;/strong&gt;&lt;br&gt;简单来说是c++11之前只有数组能够使用初始化列表这个语法糖，现在其他容器也能使用初始化列表了  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[]&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v1&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b[]=&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v2=&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; map1&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; map2=&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;v1[i]&amp;lt;&amp;lt;b[i]&amp;lt;&amp;lt;v2[i]&amp;lt;&amp;lt;map1[i]&amp;lt;&amp;lt;map2[i]&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; str&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;ssss&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;str&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;代理构造&lt;/strong&gt;&lt;br&gt;代理构造其实也是很简单，就是构造函数可以调用其他构造函数  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;constructors A()&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;):A()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;constructors A(int)&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;A &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;defaulted 和 deleted 函数&lt;/strong&gt;&lt;br&gt;c++11有了新的语法糖，defaulted 和 deleted 函数。对于defaulted函数编译器会生成默认的函数体实现，从而提高代码的执行效率。另一个，很形象，deleted函数被禁用，提高安全性。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A()=&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//默认是构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~A()=&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//默认的析构函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A(A&amp;amp;)=&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A&amp;amp; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; =(A&amp;amp;)=&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A a1=a;&lt;span class=&quot;comment&quot;&gt;//这样会报错，因为禁用拷贝构造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A a2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a2=a;&lt;span class=&quot;comment&quot;&gt;//这样写也会报错，因为禁用了赋值操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结到这里我们发现C++语法方面真的是更加灵活了，当然也增加了学习成本。不过付出这些成本是由必要的，通过这些甜甜的语法糖，我们能更加轻松的写出代码，下一篇我们来总结一下C++11类库方面的变化。  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们在前一篇博文中研究了C++11的部分语法新特性，每个特性做了示例，虽然不能包含全部的新特性的内容，但如果是入门的话还是比较明了的。今天我们把剩下的部分说完。有兴趣的同学可以参看我的上一篇博文&lt;a href=&quot;http://example.com&quot;&gt;C++笔记-C++11新特性之语法篇一&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://noble4cc.me/categories/C/"/>
    
    
      <category term="C++" scheme="http://noble4cc.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记-Linux的磁盘管理</title>
    <link href="http://noble4cc.me/Linux-note--Linux-disk-management/"/>
    <id>http://noble4cc.me/Linux-note--Linux-disk-management/</id>
    <published>2015-04-15T19:33:00.000Z</published>
    <updated>2016-04-16T06:08:59.000Z</updated>
    
    <content type="html">&lt;p&gt;生活当中我们使用windows，我们最常用的时打开我的电脑或者说计算机，对文档资源进行查找，或者文件的删除，查看磁盘占用率。其实这是对磁盘的一个操作的过程。对一款操作系统文件体系统虽然不是必须的，但是对于桌面操作系统来说，没有文件系统对我们来说是难以想象的。说起文件系统，Linux继承了Unix的文件系统，使用Linux进行磁盘管理非常的简便，本片博文我们就详细介绍一下文件系统。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Linux磁盘格式&quot;&gt;&lt;a href=&quot;#Linux磁盘格式&quot; class=&quot;headerlink&quot; title=&quot;Linux磁盘格式&quot;&gt;&lt;/a&gt;Linux磁盘格式&lt;/h3&gt;&lt;p&gt;熟悉Linux的同学会知道Linux的文件系统其实是一棵树，树根是 / 。windows下面为了使用方便吧磁盘分成了好几个区域，其中C盘用于存放系统（其实不一定哦，只是默认是这样的）。在Linux下你是找不到各种盘符的概念的。装过系统的同学肯定都知道分区这个过程。无论你分成几个区，分区一定要由格式，以前在win98时代，默认的分区格式是fat32，从winxp开始，默认的分区可是微软推荐是NTFS，前者有很多的缺点，不如容易造成磁盘碎片，不支持超过4GB的文件等。Linux下也有分区格式，但不是两者（NTFS的具体怎样工作，只有微软自己知道）。Linux使用的是专为Linux设计的ext系列。  &lt;/p&gt;
&lt;h3 id=&quot;分区&quot;&gt;&lt;a href=&quot;#分区&quot; class=&quot;headerlink&quot; title=&quot;分区&quot;&gt;&lt;/a&gt;分区&lt;/h3&gt;&lt;p&gt;首先我们讲一下分区吧，要不下面会有很多疑问。&lt;br&gt;&lt;code&gt;硬盘的种类：&lt;/code&gt;主要根据接口的不同有IDE，SATA，SCSI硬盘.&lt;br&gt;&lt;code&gt;/dev目录：&lt;/code&gt;在Linux下dev目录是非常重要的，这个目录是系统访问所有外部设备的入口，其实和访问一个文件和目录是一样的，这里也体现的Linux下万事万物皆文件。我们要想访问硬盘的分区怎么办？IDE硬盘式在/dev/hd下，SCSI，SATA硬盘有U盘是在/dev/sd下，要访问不同的硬盘和分区，只要在相应的目录下选择不同的硬盘和分区即可。比如访问第一个sata硬盘的第一个分区：/dev/sda1(mac和Linux的磁盘分区的路径是不太一样的，使用但形式差不多，使用mac的同学注意了)&lt;br&gt;&lt;code&gt;为什么要分区：&lt;/code&gt;为什么要分区呢？简单来讲是让操作系统可以在硬盘的哪些地方存储数据，硬盘由各个盘面组成，每个盘面上又有同心圆的磁道，磁道又分割成不同的扇区，扇区是硬盘的最小分割单位，分区就是让系统知道可以从那条磁道到哪条磁道可以存储数据。&lt;br&gt;&lt;code&gt;分区的数量：&lt;/code&gt;有余硬盘的物理结构所致，硬盘的主分区和扩展分区总数不能超过4个。Linux和windows都是一样的。逻辑分区子啊扩展分区下再分割，总数是和操作系统相关的，比如Linux的逻辑分区可以在IDE硬盘下可以有59个&lt;/p&gt;
&lt;h3 id=&quot;ext&quot;&gt;&lt;a href=&quot;#ext&quot; class=&quot;headerlink&quot; title=&quot;ext&quot;&gt;&lt;/a&gt;ext&lt;/h3&gt;&lt;p&gt;我们在前面的博文中讲过，磁盘上的文件的元信息是存储在inode中的，而实际文件信息是存储在block中的，文件系统还有一个superblock（超级区域块）存储着其他信息，比如 inode 与 block 的总量、使用量、剩余量等。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;superblock：记录此 filesystem 的整体信息，包括inode/block的总量、使用量、剩余量， 以及文件系统的格式与相关信息等；&lt;/li&gt;
&lt;li&gt;inode：记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的 block 号码；&lt;/li&gt;
&lt;li&gt;block：实际记录文件的内容，若文件太大时，会占用多个 block 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们一旦知道indeo中的信息，就可以知道找到block，因为inode是存储着block的信息的。这样我们就可以快速的读取数据了，原理如下图：&lt;br&gt;&lt;img src=&quot;http://7xifuy.com1.z0.glb.clouddn.com/2012082223131010.jpg&quot; alt=&quot;image description&quot;&gt;&lt;/p&gt;
&lt;p&gt;ext各个版本是不同的，比较主流的时ext2和ext3，现在ext最新的版本是5.0。ext2其实就是使用上面原理的文件系统。磁盘一旦格式化后，inode和block的对应关系就是分配好的，不能修改的，如果磁盘很大，就会有大量的inode产生，把他们都放在一起似乎效率不高，于是，ext2使用block组来管理block，每个组中都存在block，superblock和inode，这样就易于管理了。&lt;br&gt;既然block是数据块，那它一定有大小了，ext2支持三种大小的block，1KB,2KB,4KB,注意根据block大小的不同，也会使文件系统支持的单个文件的大小和最大容具有差别：  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;block大小&lt;/th&gt;
&lt;th&gt;1KB&lt;/th&gt;
&lt;th&gt;2KB&lt;/th&gt;
&lt;th&gt;4KB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单个文件的大小&lt;/td&gt;
&lt;td&gt;16GB&lt;/td&gt;
&lt;td&gt;256GB&lt;/td&gt;
&lt;td&gt;2TB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持最大容量&lt;/td&gt;
&lt;td&gt;2TB&lt;/td&gt;
&lt;td&gt;8TB&lt;/td&gt;
&lt;td&gt;16TB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;PS:inode和block一但分配就不能再改变了，除非格式化。一个block只能存储一个文件的数据，如果不够的话会占用多个block，剩余的话也不能再使用了，这样肯定会造成一定程度上的空间浪费&lt;/code&gt;&lt;br&gt;假设我们想要新增一个文件，此时文件系统的行为是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先确定用户对于欲新增文件的目录是否具有 w 与 x 的权限，若有的话才能新增；&lt;/li&gt;
&lt;li&gt;根据 inode bitmap 找到没有使用的 inode 号码，并将新文件的权限/属性写入；&lt;/li&gt;
&lt;li&gt;根据 block bitmap 找到没有使用中的 block 号码，并将实际的数据写入 block 中，且升级 inode 的 block 指向数据；&lt;/li&gt;
&lt;li&gt;将刚刚写入的 inode 与 block 数据同步升级 inode bitmap 与 block bitmap，并升级 superblock 的内容。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，我们将 inode table 与 data block 称为数据存放区域，至于其他例如 superblock、 block bitmap 与 inode bitmap 等区段就被称为 metadata (中介数据) 啰，因为 superblock, inode bitmap 及 block bitmap 的数据是经常变动的，每次新增、移除、编辑时都可能会影响到这三个部分的数据，因此才被称为中介数据的啦。&lt;br&gt;ext2和ext3基本是一样的，但是ext3加入了日志功能。&lt;br&gt;如果我们插入数据时只向inode和block中写入了数据，没有来得及想中介数据写入（比如发生停电之类的突发情况），怎么办呢？在ext2文件系统中，如果发生上述情况，由 Superblock 当中记录的 valid bit (是否有挂载) 与 filesystem state (clean 与否) 等状态来判断是否强制进行数据一致性的检查。强制进行数据检查是相当耗时间的，如果数据量很大的话比如说TB级别，哪时间将是无法忍受的。&lt;br&gt;好在我们有ext3文件系统。&lt;br&gt;当我们对数据进行修改的时候，我们用文件系统中的一段存储区域，将对数据进行的操作步骤记录下来，这样当发生意外时，我们就可以针对相应的部分进行检查，而不需要检查整个系统。&lt;br&gt;ext3就是加入了日志系统的ext2升级版，除此之外，他与ext2区别并不大。我们发现ext3比ext2更加的易用，所以建议大家在平常的使用中使用ext3.  &lt;/p&gt;
&lt;h3 id=&quot;Linux磁盘管理&quot;&gt;&lt;a href=&quot;#Linux磁盘管理&quot; class=&quot;headerlink&quot; title=&quot;Linux磁盘管理&quot;&gt;&lt;/a&gt;Linux磁盘管理&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;dd&lt;/strong&gt;&lt;br&gt;dd 是 Linux/UNIX 下的一个非常有用的命令，作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if =输入文件（或设备名称）。&lt;/li&gt;
&lt;li&gt;of =输出文件（或设备名称）。&lt;/li&gt;
&lt;li&gt;ibs = bytes 一次读取bytes字节，即读入缓冲区的字节数。&lt;/li&gt;
&lt;li&gt;skip = blocks 跳过读入缓冲区开头的ibs*blocks块。&lt;/li&gt;
&lt;li&gt;obs = bytes 一次写入bytes字节，即写入缓冲区的字节数。&lt;/li&gt;
&lt;li&gt;bs = bytes 同时设置读/写缓冲区的字节数（等于设置ibs和obs）。&lt;/li&gt;
&lt;li&gt;cbs = byte 一次转换bytes字节。&lt;/li&gt;
&lt;li&gt;count=blocks 只拷贝输入的blocks块。&lt;br&gt;比如将一个目录中的文件拷贝到另一个文件夹&lt;br&gt;dd if=/home/cc959798/file1 of=/home/cc959798/file2&lt;br&gt;&lt;strong&gt;du&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;du命令是查看磁盘的使用空间。命令格式：  &lt;/li&gt;
&lt;li&gt;du 选项 目录/文件  &lt;/li&gt;
&lt;li&gt;a或-all 显示目录中个别文件的大小。&lt;/li&gt;
&lt;li&gt;b或-bytes 显示目录或文件大小时，以byte为单位。&lt;/li&gt;
&lt;li&gt;c或—total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。&lt;/li&gt;
&lt;li&gt;k或—kilobytes 以KB(1024bytes)为单位输出。&lt;/li&gt;
&lt;li&gt;m或—megabytes 以MB为单位输出。&lt;/li&gt;
&lt;li&gt;s或—summarize 仅显示总计，只列出最后加总的值。&lt;/li&gt;
&lt;li&gt;h或—human-readable 以K，M，G为单位，提高信息的可读性。&lt;/li&gt;
&lt;li&gt;x或—one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。&lt;/li&gt;
&lt;li&gt;L&amp;lt;符号链接&amp;gt;或—dereference&amp;lt;符号链接&amp;gt; 显示选项中所指定符号链接的源文件大小。&lt;/li&gt;
&lt;li&gt;S或—separate-dirs 显示个别目录的大小时，并不含其子目录的大小。&lt;/li&gt;
&lt;li&gt;X&amp;lt;文件&amp;gt;或—exclude-from=&amp;lt;文件&amp;gt; 在&amp;lt;文件&amp;gt;指定目录或文件。&lt;/li&gt;
&lt;li&gt;exclude=&amp;lt;目录或文件&amp;gt; 略过指定的目录或文件。&lt;/li&gt;
&lt;li&gt;D或—dereference-args 显示指定符号链接的源文件大小。&lt;/li&gt;
&lt;li&gt;H或—si 与-h参数相同，但是K，M，G是以1000为换算单位。&lt;/li&gt;
&lt;li&gt;l或—count-links 重复计算硬件链接的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实du是很实用的一个命令，主要的几点是使用-a选项显示所有的文件的大小，使用-c选项进行总大小的统计，使用-h显示单位  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# du &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20	.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#du head.jpeg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16 head.jpeg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# du -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4	./file.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12	./head.jpeg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20	.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# du -ac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4	./file.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12	./head.jpeg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20	.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20	总用量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# du -ah&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.0K	./file.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12K	./head.jpeg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20K	.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;df&lt;/strong&gt;&lt;br&gt;df显示磁盘空间的使用情况&lt;br&gt;df [选项] [文件系统列表]&lt;br&gt;当不带任何参数调用df时，用户将获得本地系统上每个挂载设备的空闲空间&lt;br&gt;文件系统列表是一个或多个路径名的可选列表，路径名用来指定要涵盖其空间使用情况的文件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;h 以KB（千字节）、MB（兆字节）、GB（千兆字节）为单位显示块大小&lt;/li&gt;
&lt;li&gt;l 仅显示本地文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# df&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文件系统          1K-块     已用    可用 已用% 挂载点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;udev             675428        0  675428    0% /dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs            137168     5260  131908    4% /run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sda1      19132284 11840732 6296636   66% /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs            685836       84  685752    1% /dev/shm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs              5120        4    5116    1% /run/lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs            685836        0  685836    0% /sys/fs/cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cgmfs               100        0     100    0% /run/cgmanager/fs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs            137168       56  137112    1% /run/user/1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# df -h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文件系统        容量  已用  可用 已用% 挂载点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;udev            660M     0  660M    0% /dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           134M  5.2M  129M    4% /run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/sda1        19G   12G  6.1G   66% /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           670M   84K  670M    1% /dev/shm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           5.0M  4.0K  5.0M    1% /run/lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           670M     0  670M    0% /sys/fs/cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cgmfs           100K     0  100K    0% /run/cgmanager/fs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs           134M   56K  134M    1% /run/user/1000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;mount&lt;/strong&gt;&lt;br&gt;mount是将磁盘挂载到你的设别上&lt;br&gt;格式：mount [-参数] [设备名称] [挂载点]&lt;br&gt;其中常用的参数有：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 安装在/etc/fstab文件中类出的所有文件系统。&lt;/li&gt;
&lt;li&gt;f 伪装mount，作出检查设备和目录的样子，但并不真正挂载文件系统。&lt;/li&gt;
&lt;li&gt;n 不把安装记录在/etc/mtab 文件中。&lt;/li&gt;
&lt;li&gt;r 讲文件系统安装为只读。&lt;/li&gt;
&lt;li&gt;v 详细显示安装信息。&lt;/li&gt;
&lt;li&gt;w 将文件系统安装为可写，为命令默认情况。&lt;/li&gt;
&lt;li&gt;t &amp;lt;文件系统类型&amp;gt; 指定设备的文件系统类型&lt;br&gt;相对的umount时卸载挂载的磁盘的命令&lt;br&gt;unmount 挂载的目录  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# sduo mkdir upan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# sudo mount /dev/sdb1 /media/cc959798/upan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cd upan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# sudo umount /media/cc959798/upan&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;mkfs&lt;/strong&gt;&lt;br&gt;mkfs命令用于在特定的分区上建立 linux 文件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;device ： 预备检查的硬盘分区&lt;/li&gt;
&lt;li&gt;V : 详细显示模式&lt;/li&gt;
&lt;li&gt;t : 给定档案系统的型式，Linux 的预设值为 ext2&lt;/li&gt;
&lt;li&gt;c : 在制做档案系统前，检查该partition 是否有坏轨&lt;/li&gt;
&lt;li&gt;l bad_blocks_file : 将有坏轨的block资料加到 bad_blocks_file 里面&lt;/li&gt;
&lt;li&gt;block : 给定 block 的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说白了就是给一个新分区格式化  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# mkfs -V -t msdos -c /dev/hda5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# mfks -t ext3 /dev/sda6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;fsck&lt;/strong&gt;&lt;br&gt;如果你的使用的文件系统出现错误的话，需要使用fsck命令进行文件系统的恢复，这个命令类似于windows上的chkdsk。比如你的机器停电了，你重启后进不去文件系统了，你需要这个命令进行修复，但是这个命令有着很大的风险性，对已经挂载的磁盘是非常危险的。  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;生活当中我们使用windows，我们最常用的时打开我的电脑或者说计算机，对文档资源进行查找，或者文件的删除，查看磁盘占用率。其实这是对磁盘的一个操作的过程。对一款操作系统文件体系统虽然不是必须的，但是对于桌面操作系统来说，没有文件系统对我们来说是难以想象的。说起文件系统，Linux继承了Unix的文件系统，使用Linux进行磁盘管理非常的简便，本片博文我们就详细介绍一下文件系统。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C++笔记-C++11新特性之标准库</title>
    <link href="http://noble4cc.me/C-notes--C-11-new-features-of-the-standard-library/"/>
    <id>http://noble4cc.me/C-notes--C-11-new-features-of-the-standard-library/</id>
    <published>2015-04-09T06:22:00.000Z</published>
    <updated>2016-04-16T06:07:46.000Z</updated>
    
    <content type="html">&lt;p&gt;说起标准库，说起C++标准库，我们想每一位C++初学者一定会感想，C++你为何如此骨感（是走萝莉路线吗）。不只一次的吐槽过，没有网络库，没有多线程，没有图形库，没有…好在C++从来就不缺少第三方的类库，比如网络库的ACE，net-lib,图形的Qt，wxwidgets，还有瑞士军刀型的Boost。但是第三方的库质量参差不齐，使用起来不如标准库方便。令人欣喜的是C++11本次更新不光是语法上了，标准库也丰富了许多。本次我们讲究来初步了解一下C++11新增加的标准库。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;虽然新增加的不少类库，但是还是没有我们翘首以盼的网络库，具体原因吧请参看&lt;a href=&quot;https://www.zhihu.com/question/22901804&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为何C++11与1y都没有将network功能优先加入标准库？&lt;/a&gt;,各路大神们已经分析的很好了。至于图形库的方面，我们现在也不期待了，毕竟C++的图形库有很多重量级的产品，而且各家平台都有自己的亲儿子。可是相比丰满的java和C#还是落后一大截，希望标准委员会的老爷们加快点速度（C++最短5年已更新，实在是慢了）。    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;智能指针&lt;/strong&gt;&lt;br&gt;在C++11之前想必大家就已经知道了智能指针的大名了吧，在意不用手动释放内存了（玩笑哦，不要当真，但是智能指针真的简化了大家的操作）。在之前的tr1和大名鼎鼎的boost中都智能指针的内容，这里我们不再做太多的赘述，网上搜索一大堆资料。简单说说新增到std中的三个智能指针。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unique_ptr: 如果内存资源的所有权不需要共享，就应当使用这个（它没有拷贝构造函数），但是它可以转让给另一个unique_ptr（存在move构造函数）。&lt;/li&gt;
&lt;li&gt;shared_ptr: 如果内存资源需要共享，那么使用这个（所以叫这个名字）。&lt;/li&gt;
&lt;li&gt;weak_ptr: 持有被shared_ptr所管理对象的引用，但是不会改变引用计数值。它被用来打破依赖循环（想象在一个tree结构中，父节点通过一个共享所有权的引用(chared_ptr)引用子节点，同时子节点又必须持有父节点的引用。如果这第二个引用也共享所S有权，就会导致一个循环，最终两个节点内存都无法释放）。&lt;br&gt;另外auto_ptr已经废弃了，推荐大家是使用了。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; sp=shared_ptr_test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*sp&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//打印所指向的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*sp.get()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//获得裸指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; sp2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sp2=sp;&lt;span class=&quot;comment&quot;&gt;//取代管理的对象，引用计数加1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sp.reset();&lt;span class=&quot;comment&quot;&gt;//引用计数减1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;unique_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; up(new &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;888&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*up&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//无法进行复制构造，也无法进行复制赋值操作。也就是说，我们无法得到指向同一个对象的两个unique_ptr。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//但是可以进行移动构造和移动赋值操作，以下这样操作会造成编译错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//    unique_ptr&amp;lt;int&amp;gt; up2(up);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//    up2=up;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//up.reset();//取代管理的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* j=up.get();&lt;span class=&quot;comment&quot;&gt;//返回一个指针，指向被管理对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* i=up.release();&lt;span class=&quot;comment&quot;&gt;//返回一个指针，指向被管理对象，并释放所有权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*j&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*i&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//weak_ptr是为配合shared_ptr而引入的一种智能指针来协助shared_ptr工作，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//它可从一个shared_ptr或另一个weak_ptr对象构造，它的构造和析构不会引起引用记数的增加或减少。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//没有重载*和-&amp;gt;但可以使用lock获得一个可用的shared_ptr对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;shared_ptr&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; sp3(new &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;777&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weak_ptr&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; wp(sp3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!wp.expired())&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; t=wp.lock();&lt;span class=&quot;comment&quot;&gt;//获得一个share_ptr对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;wp.use_count()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//观测引用计数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *t=&lt;span class=&quot;number&quot;&gt;666&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//改变所指对象的值，sp3中的也改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*sp3&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;&lt;br&gt;正则表达式功能强大，使用方便，但是C++以前的版本并不支持正则表达式（再次吐槽一下C++的标准库，真是少的可怜~~~），好在现在的版本已经支持正则表达式了，其实很简单的，不过各家的编译器对正则表达式支持的真心的不好，GCC好像要到4.9及以上可以完美支持。VC没有测试，建议使用最新的。使用正则表达式要引入头文件 “&lt;code&gt;regex&lt;/code&gt;“&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * regex_match()只有在整个字符串匹配正则表达式时才返回 true, 而 regex_search()在子串匹配就返回 true.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; email=&lt;span class=&quot;string&quot;&gt;&quot;username@domain.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;regex &lt;span class=&quot;title&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;(\\w+)(\\.|_)?(\\w*)@(\\w+)(\\.(\\w+))+&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::regex_match(email,pattern)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::regex_search(email,pattern)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;多线程&lt;/strong&gt;&lt;br&gt;在当今程序设计中，多线程可以说是及其常见，我们利用新开的线程可以大大提高效率，提高CPU的利用率，可是让人惊讶的是C++在以前的标准库中竟然没有支持多线程操作。再次真心吐槽。好在C++11为我们提供了多线程的支持。多线程的知识其实是很庞大的，我们这里只做简单的介绍，有兴趣 的同学可以查看C++11的标准文档。&lt;br&gt;我们在使用c++11的线程时主要使用std::thread,还有std::this_thread命名空间内的函数。&lt;br&gt;如果我们需要线程安全的话，我们还需要mutex头文件下的各种互斥量  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iosrteam&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::mutex mtx;&lt;span class=&quot;comment&quot;&gt;//互斥变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; info)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mtx.lock();&lt;span class=&quot;comment&quot;&gt;//加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;info&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;this thread id：&quot;&lt;/span&gt;&amp;lt;&amp;lt;this_thread::get_id()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//获得当前线程的id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this_thread::sleep_for(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::chrono::seconds(rand() % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//书面一段时间，sleep_until()是睡眠至一个时间点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mtx.unlock();&lt;span class=&quot;comment&quot;&gt;//解锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func,&lt;span class=&quot;string&quot;&gt;&quot;th1:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//创建一个thread变量，并且传入参数，thread的构造方法是可变参数的，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//可以传入多个变量，这几个变量会依次传入第一个函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;th2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func,&lt;span class=&quot;string&quot;&gt;&quot;th2:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;thread &lt;span class=&quot;title&quot;&gt;th3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func,&lt;span class=&quot;string&quot;&gt;&quot;th3:&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    th1.detach();&lt;span class=&quot;comment&quot;&gt;//允许执行该方法的线程脱离其线程对象而继续独立执行,也就是非阻塞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    th2.detach();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    th3.join();&lt;span class=&quot;comment&quot;&gt;//调用将使调用线程，一直处于阻塞状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;array数组&lt;/strong&gt;&lt;br&gt;array其实就是数组，而且是固定大小的数组，与一般的数组一样，效率很高，比如array和普通的T arr[N]是一样的。只不过array具有标准C++容器应该具有的特性，比如大小，迭代等。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;array&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using namespce std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	array&amp;lt;int,3&amp;gt; arr=&amp;#123;1,2,3&amp;#125;;//创建一个大小为3的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(auto i:arr)//遍历元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(auto iter=arr.begin();iter!=arr.end();++iter)//迭代器进行遍历元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout&amp;lt;&amp;lt;*iter&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr[0]=4;//改变第一个元素的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout&amp;lt;&amp;lt;arr[0]&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout&amp;lt;&amp;lt;arr.size()&amp;lt;&amp;lt;endl;//arr数组的大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout&amp;lt;&amp;lt;arr.at(1)&amp;lt;&amp;lt;endl;//打印第2的元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout&amp;lt;&amp;lt;arr.front()&amp;lt;&amp;lt;endl;//打印头部的元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout&amp;lt;&amp;lt;arr.end()&amp;lt;&amp;lt;endl;//打印尾部的元素	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;元组类型&lt;/strong&gt;&lt;br&gt;C++11中有了元组，其实元组的概念我想大家并不陌生，其实在C#中也存在着相同的概念。简单来说元组就是 是一个固定大小的异构值的集合。这是一般化的 std::pair。也就说，它是一个容器，里面可以放任何类型的变量。就像一个结构体一样，只是我们不需要在定义结构体。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;tuple&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;comment&quot;&gt;/* 相当于创建了一个结构体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * struct tuple1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  int i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  char c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  string str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tuple&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; tuple1;&lt;span class=&quot;comment&quot;&gt;//创建一个元组对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tuple1=make_tuple(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//构造一个元组对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::get&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;gt;(tuple1)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//打印元组的第一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::get&amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;(tuple1)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::get&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;(tuple1)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; tuple2= make_tuple(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::tie(i,c,str)=tuple2;&lt;span class=&quot;comment&quot;&gt;//进行解包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;c&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;str&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;散列表&lt;/strong&gt;&lt;br&gt;散列表也叫做哈希表，使用哈希函数计算元素的存储位置的一种数据结构，我们在上数据结构课中应该都学过。但是C++在很长的一段时间内是没有哈希表的，我们平常所用的map和set和java中的hashMap和hashSet不是一样的，java中的前面有个hash，底层实现就是哈希。C++中的map和set底层实际是红黑树，虽然用起来很像，但是有本质上的区别的。至于为什么STL中没有加入哈希表，传言可能是当时的STL标准发布时哈希表还没有完成，但是我们在boost和tr1中都能发现哈希表的身影，C++11标准中的哈希表其实是boost中的unordered_map和unorder_set。C++中的哈希map、set和普通的map、set使用几乎相同，其他只是底层实现不太一样。&lt;code&gt;map插入和删除的时间复杂度是logn，哈希map、set的时间复杂度是1。另外哈希map和set是无序的map和set是有序的。&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;unordered_map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;unordered_set&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;unordered_multimap&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;multimap&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//允许插入的数据是重复的，其他的都与unordered_map相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;unordered_multiset&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//允许插入数据重复，其他与unordered_set相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;.insert(pair&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;.insert(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;]&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;*&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;.find(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;可扩展的随机数&lt;/strong&gt;&lt;br&gt;以前C++产生随机数是使用了rand()和srand()两个标准函数，现在C++11中的随机函数变得有些复杂了，这里我们也只做演示。新增了标准库random_device类，不用添加随机种子，在Linux和UNIX下使用的是/dev/random。在windows下使用的rand_s来产生随机数。并且添加了随机数引擎。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostram&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;random_device &lt;span class=&quot;title&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/dev/random&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Minimum:&quot;&lt;/span&gt;&amp;lt;&amp;lt;rd.min()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Maximum:&quot;&lt;/span&gt;&amp;lt;&amp;lt;rd.max()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Entropy:&quot;&lt;/span&gt;&amp;lt;&amp;lt;rd.entropy()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Random:&quot;&lt;/span&gt;&amp;lt;&amp;lt;rd()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default_random_engine random_engine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;random_engine()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;时间类型&lt;/strong&gt;&lt;br&gt;c++11提供了日期时间相关的库chrono，通过chrono相关的库我们可以很方便的处理日期和时间。c++11还提供了字符串的宽窄转换功能，也提供了字符串和数字的相互转换的库。有了这些库提供的便利的工具类，我们能方便的处理日期和时间相关的转换和格式输出。&lt;br&gt;主要添加了这三个部分：&lt;br&gt;&lt;code&gt;duratrion&lt;/code&gt;&lt;br&gt;顾名思义是时间间隔的意思。可以表示几分钟，几秒或者几个小时等等。他是个模板，原型是：&lt;br&gt;template&amp;gt; class duration;&lt;br&gt;有两个参数，rep表示这段间隔所含时钟的个数，period表示一个时钟的周期是多少，单位是秒。&lt;br&gt;我们需要说一下这个模板&lt;br&gt;template class ratio;&lt;br&gt;简单来讲他是我们数学上的分数，Num是分子，Denom是分母，分数也是一个数字，这个分数的大小就是一个周期大小。&lt;br&gt;&lt;code&gt;time_point&lt;/code&gt;&lt;br&gt;time_point表示一个时间点，用来获取1970.1.1以来的秒数和当前的时间, 可以做一些时间的比较和算术运算，可以和ctime库结合起来显示时间。time_point必须要clock来计时，time_point有一个函数time_since_epoch()用来获得1970年1月1日到time_point时间经过的duration。&lt;br&gt;&lt;code&gt;clock&lt;/code&gt;&lt;br&gt;表示当前的系统时钟，内部有time_point, duration, Rep,  Period等信息，它主要用来获取当前时间，以及实现time_t和time_point的相互转换。Clocks包含三种时钟：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system_clock：从系统获取的时钟；  &lt;/li&gt;
&lt;li&gt;steady_clock：不能被修改的时钟；  &lt;/li&gt;
&lt;li&gt;high_resolution_clock：高精度时钟，实际上是system_clock或者steady_clock的别名。&lt;br&gt;可以通过now()来获取当前时间点：  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iosrteam&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ctime&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ratio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::chrono;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;hours &lt;span class=&quot;title&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//1小时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;minutes &lt;span class=&quot;title&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//10分钟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;seconds &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//100秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;milliseconds &lt;span class=&quot;title&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//1000毫秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;microseconds &lt;span class=&quot;title&quot;&gt;mcs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//1000微秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;nanoseconds &lt;span class=&quot;title&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//1000纳秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获得当前时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time_point&amp;lt;system_clock,duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,ratio&amp;lt;&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; tpNow=time_point_cast&amp;lt;duration&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,ratio&amp;lt;&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;(system_clock::now());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获得当前时间从1970.1.1经过的天数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;tpNow.time_since_epoch().count()&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将当前的系统时间装换成ctime类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;time_t&lt;/span&gt; time=system_clock::&lt;span class=&quot;keyword&quot;&gt;to_time_t&lt;/span&gt;(system_clock::now());&lt;span class=&quot;comment&quot;&gt;//system_clock::now()获得当前的系统时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//使用put_time将时间格式化输出该函数位于iomanip头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt; put_time(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::localtime(&amp;amp;time), &lt;span class=&quot;string&quot;&gt;&quot;%Y-%m-%d %X&quot;&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;说起标准库，说起C++标准库，我们想每一位C++初学者一定会感想，C++你为何如此骨感（是走萝莉路线吗）。不只一次的吐槽过，没有网络库，没有多线程，没有图形库，没有…好在C++从来就不缺少第三方的类库，比如网络库的ACE，net-lib,图形的Qt，wxwidgets，还有瑞士军刀型的Boost。但是第三方的库质量参差不齐，使用起来不如标准库方便。令人欣喜的是C++11本次更新不光是语法上了，标准库也丰富了许多。本次我们讲究来初步了解一下C++11新增加的标准库。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://noble4cc.me/categories/C/"/>
    
    
      <category term="C++" scheme="http://noble4cc.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++笔记-C++11新特性之语法篇一</title>
    <link href="http://noble4cc.me/C++-notes-C++11-features-of-grammar-1/"/>
    <id>http://noble4cc.me/C++-notes-C++11-features-of-grammar-1/</id>
    <published>2015-04-02T17:20:00.000Z</published>
    <updated>2016-04-16T06:07:51.000Z</updated>
    
    <content type="html">&lt;p&gt;C++11，想必大家已经不太陌生了吧。就连许多搞java的同学都对它有所耳闻。c++11是c++标注委员会在2011年出台的新的c++标准。他拥有了诸多新的革命性的特性，全面提升c++这把利剑的战斗力，甚至更有人说，c++11简直就像一门新的语言。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;C-的历史&quot;&gt;&lt;a href=&quot;#C-的历史&quot; class=&quot;headerlink&quot; title=&quot;C++的历史&quot;&gt;&lt;/a&gt;C++的历史&lt;/h3&gt;&lt;p&gt;首先我们来回顾一下c++的历史（老生常谈，不愿看的跳过）。提起c++，大家首先会想到c语言。是的，c++兼容c语言。由于C语言语法限定的问题，不能使用面向对象的许多特性，这就催生了新语言的产生。&lt;code&gt;C with Class&lt;/code&gt;:出现在C语言发展到顶峰时，是C++最早的版本，在C语言中增加class关键字和类;又经过了一段时间的发展，牛叉的贝尔实验室重要在1983年推出了革命性的语言，并将语言命名为c++。这需要吐槽的是，c++虽然诞生在1983年，但是第一个标准是在1998年制定的，虽然这期间c++发生了翻天覆地的变化。第一个c++标准版本叫做c++98，以后五年更新一次。在2003年，c++标准委员会发布了具有小幅更新的c++03.但是主要是修改BUG，没有太多语言特性的变化。按理说c++的下一个版本应该在2008年发布，但由于一些原因吧（可能是标准委员会的效率太低），c++新版本在2011年正式投票通过，推出了革命性的c++11.在2014年，标准委员会又放了小招，发布了C++14。&lt;br&gt;下一个版本计划在2017年发布（只是计划哦…）。  &lt;/p&gt;
&lt;h3 id=&quot;语法特性&quot;&gt;&lt;a href=&quot;#语法特性&quot; class=&quot;headerlink&quot; title=&quot;语法特性&quot;&gt;&lt;/a&gt;语法特性&lt;/h3&gt;&lt;p&gt;C++11新特性十分强大，主要有：auto、nullptr、范围的for循环、Override和final、强类型枚举、智能指针、Lambdas表达式、非成员begin()和end()、Move、static_assert….下面我们就简单介绍一下。&lt;br&gt;&lt;code&gt;注意：c++11需要编译器支持，gcc需要4.8.1及以上，clang需要3.3及以上，vc一直支持不是太好，但是也已经支持绝大部分了，要想使用更多的c++11特性的话，建议下载最新的vs2013&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;auto&lt;/strong&gt;&lt;br&gt;auto自动类型推断，用于从初始化表达式中推断出变量的数据类型。通过auto的自动类型推断，可以大大简化我们的编程工作。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; c = &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;你好&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以使用valatile，pointer（*），reference（&amp;amp;），rvalue reference（&amp;amp;&amp;amp;） 来修饰auto&lt;/li&gt;
&lt;li&gt;用auto声明的变量必须初始化&lt;/li&gt;
&lt;li&gt;auto不能与其他类型组合连用&lt;/li&gt;
&lt;li&gt;函数和模板参数不能被声明为auto&lt;/li&gt;
&lt;li&gt;定义在堆上的变量，使用了auto的表达式必须被初始化&lt;/li&gt;
&lt;li&gt;以为auto是一个占位符，并不是一个他自己的类型，因此不能用于类型转换或其他一些操作，如sizeof和typeid&lt;/li&gt;
&lt;li&gt;定义在一个auto序列的变量必须始终推导成同一类型&lt;/li&gt;
&lt;li&gt;auto不能自动推导成CV-qualifiers（constant &amp;amp; volatile qualifiers），除非被声明为引用类型&lt;/li&gt;
&lt;li&gt;auto会退化成指向数组的指针，除非被声明为引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;nullptr&lt;/strong&gt;&lt;br&gt;说起nullptr，不能不说NULL，我们想只要写过c/c++的程序员一定不会陌生NULL，他不是什么关键字，其实是一个宏：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在标准c中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NULL (void*)0  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在c++98中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; NULL  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; __cplusplus  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NULL    0  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NULL    ((void *)0)  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在C中是0地址，在c++中其实就是0&lt;br&gt;nullptr简单来说就是空或者说空指针，熟悉java或者c#的同学肯定不会陌生null这个关键字，其实nullptr和null的作用差不多。因为c++用0指代空指针，容易转换成整形，但使用nullptr就不存在这个问题，nullptr可以转换成任何指针类型，也可以转换成bool类型，但是不能隐式转换成整形。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* c)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; b=&lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;范围for循环&lt;/strong&gt;&lt;br&gt;为了在遍历容器时支持”foreach”用法，C++11扩展了for语句的语法。用这个新的写法，可以遍历C类型的数组、初始化列表以及任何重载了非成员的begin()和end()函数的类型。 因为我们写begin()和end()时，实在是太繁琐了。&lt;br&gt;如果只是想迭遍历一个容器的话，而不关心下标、迭代器位置或者元素个数，那么这种foreach的for循环将会非常有用。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; i:v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;override和final&lt;/strong&gt;&lt;br&gt;在以前的c++版本当中，我们无法有效的让派生类一定重写基类中的虚函数，或者有时候一些不经意的错误会使重写基类函数失败。或者某个方法不应该重写，不经意间重写了该函数，这都是很令人头痛的问题。好在现在的c++版本有了新的特性。&lt;br&gt;override：表示派生类应中的函数该重写基类中函数。&lt;br&gt;final：表示派生类不应该重写该函数。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; B: &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)&lt;/span&gt; override&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)&lt;/span&gt; final&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果这样做的话会报错，因为A中没有一个func(int) 函数让B重写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; C:&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果这样做也会报错，因为B中的func(char)函数允许子类重写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;强类型枚举&lt;/strong&gt;&lt;br&gt;在以前的c++版本中枚举类型是直接暴露在外部作用域中的，而且会默认隐式转换成整形，而且可以直接可以整形进行比较，使用起来不经意间就出现问题，并且在同个作用域中是不能定义相同的枚举常量的，比如这样会引起编译报错：&lt;br&gt;enum A{a,b,c}; enum B{b,c,d};&lt;br&gt;在C++11中引入了强类型的枚举类型，由enum class 类型名 来创建强类型枚举。这种强类型没枚举不会隐式转换成整形，也不会直接暴露在作用域中，并且传统枚举和强类型枚举都可以用户自定义枚举的类型，当然默认是整形的。强类型枚举是不能和整形直接进行比较的会引起编译错误。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; NewEnum:&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;//可以指定枚举常量的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e1,e2=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,e3,e4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Enum:&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e1,e2=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,e3,e4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NewEnum e1=NewEnum::e1;&lt;span class=&quot;comment&quot;&gt;//定义强类型枚举&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a=NewEnum::e1;&lt;span class=&quot;comment&quot;&gt;//这样写编译是会报错的，强类型枚举不能转换成整形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b=Enum::e1;&lt;span class=&quot;comment&quot;&gt;//传统类型枚举可以转换成整形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enum e2=Enum::e1;&lt;span class=&quot;comment&quot;&gt;//强类型枚举不能转换成整形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c=e2;&lt;span class=&quot;comment&quot;&gt;//传统类型可以转换成整形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enum e3=e4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;e1&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//这样写会报错，因为e1不能转换成整形，不能直接打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;e3&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//传统枚举可以直接打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Lambda表达式&lt;/strong&gt;&lt;br&gt;lambda表达式也叫做匿名函数，其实这在很多函数式编程语言中很常见，而且最新的Java8也开始支持lambda表达式了，C#支持的更早了一些。可见lambda表达式是现代编程语言中很重要的一个特性，有了它你可以使用函数对象和函子，使得其他特性和类库可以实现。以前C++版本要想传递一个函数，一般是用函数指针，可是函数指针用起来繁琐，而且很容易出错，为了简化操作，神奇的匿名函数就登场了&lt;br&gt;lambda基本语法：&lt;br&gt;&lt;code&gt;[捕获列表](形参) mutable或exception声明 -&amp;gt;返回值类型 {函数体}&lt;/code&gt;&lt;br&gt;下面我们解释一下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;捕获列表：从当前作用域中捕获变量供表达式使用，如果不加mutable捕获的变量是无法改变的&lt;/li&gt;
&lt;li&gt;形参：和函数一样，不多说了，没有形参可以省略()&lt;/li&gt;
&lt;li&gt;返回值类型：如果分返值可以经过类型推导出来可以不用添加&lt;/li&gt;
&lt;li&gt;函数体：无需在语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体说说捕获列表：&lt;br&gt;lambda表达式中可以获取（捕获）它所在作用域中的变量值，并且有两种捕获方式：引用和值。我们可以在捕获列表中设置各变量的捕获方式。如果没有设置捕获列表，lambda默认不能捕获任何的变量,使用=作为值捕获的标示，使用&amp;amp;作为引用的捕获，默认是以值捕获。变量之间用逗号分隔，比如 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[a,&amp;amp;b] a变量以值的方式呗捕获，b以引用的方式被捕获。&lt;/li&gt;
&lt;li&gt;[this] 以值的方式捕获 this 指针。&lt;/li&gt;
&lt;li&gt;[&amp;amp;] 以引用的方式捕获所有的外部自动变量。&lt;/li&gt;
&lt;li&gt;[=] 以值的方式捕获所有的外部自动变量。&lt;/li&gt;
&lt;li&gt;[] 不捕获外部的任何变量。&lt;br&gt;示例代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s=&lt;span class=&quot;string&quot;&gt;&quot;hello lambda&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; lam=[s,&amp;amp;n]()-&amp;gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;s&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lam();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;n&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于篇幅问题（写多了也不爱看），本篇就写到这，剩下的将会陆续更新&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;C++11，想必大家已经不太陌生了吧。就连许多搞java的同学都对它有所耳闻。c++11是c++标注委员会在2011年出台的新的c++标准。他拥有了诸多新的革命性的特性，全面提升c++这把利剑的战斗力，甚至更有人说，c++11简直就像一门新的语言。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://noble4cc.me/categories/C/"/>
    
    
      <category term="C++" scheme="http://noble4cc.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记-输入输出重定向</title>
    <link href="http://noble4cc.me/Linux-notes-the-input-and-output-redirection/"/>
    <id>http://noble4cc.me/Linux-notes-the-input-and-output-redirection/</id>
    <published>2015-03-13T05:41:00.000Z</published>
    <updated>2016-04-16T06:09:40.000Z</updated>
    
    <content type="html">&lt;p&gt;所谓重定向顾名思义就是从一个方向转换成另一个方向。Linux输入输出的重定向是改变系统的默认的执行方式。比如某个命令本来输出的信息是打印到屏幕上的。但是我们想让他保存到一个文件中（常用的是保存系统的日志文件），这就是Linux的重定向。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;概念讲解&quot;&gt;&lt;a href=&quot;#概念讲解&quot; class=&quot;headerlink&quot; title=&quot;概念讲解&quot;&gt;&lt;/a&gt;概念讲解&lt;/h3&gt;&lt;p&gt;我们先来学习一下基本知识，输入输出流的位置成称为句柄。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;句柄&lt;/th&gt;
&lt;th&gt;句柄号&lt;/th&gt;
&lt;th&gt;句柄描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;STDIN&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;键盘输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STDOUT&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;输出信息到提示符窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STDIN&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;输出错误信息到提示符窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;输出重定向使用使符号&amp;gt;,&amp;gt;默认为标准输出重定向，与1&amp;gt;相同。输入重定向的操作符是&amp;lt;，&amp;lt; 默认为标准输入重定向。&amp;lt; &amp;gt;操作符之后，必须指定数据的读写位置，可以是文件名或其他现有的句柄。&lt;br&gt;要指定重定向到现有句柄，请使用与 &amp;amp; 字符，后面接要重定向的句柄号(即 &amp;amp;句柄号)。&lt;br&gt;输入输出重定向操作符：  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;重定向操作符&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;将命令输出写入文件或设备，而不是命令提示符或句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;从文件而不是从键盘或句柄读入命令输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;将命令输出添加到文件末尾而不删除文件中已有的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;将一个句柄的输出写入到另一个句柄的输入中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;amp;&lt;/td&gt;
&lt;td&gt;从一个句柄读取输入并将其写入到另一个句柄输出中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;竖线&lt;/td&gt;
&lt;td&gt;从一个命令中读取输出并将其写入另一个命令的输入中;也称为管道操作符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Linux下有一个很特殊的文件/dev/null，他就像一个垃圾桶，手机各种不需要显示的信息，而且容量是无限的，当我们不需要回显信息时，我们可以重定向到这里。&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;p&gt;我们将ls命令输出的内容写入到log文件中，查看log文件中的内容,发现和ls打印到屏幕上的相同&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file1 file2 log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ls &amp;gt; log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cat log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们将ls 命令的错误输出写入到文件log中，这时使用2&amp;gt;log重定向到log，接着我们2&amp;gt;&amp;amp;1将错误重定向输入到标准输出流中。发现输出的内容也是一样的。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ls dir &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls: 无法访问dir: 没有那个文件或目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ls dir 2&amp;gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cat log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls: 无法访问dir: 没有那个文件或目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ls dir 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls: 无法访问dir: 没有那个文件或目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们使用&amp;gt;&amp;gt;命令将命令的标准输出追加到log文件的尾部，使用管道符 | 将输出作为 grep命令的输入，使用&amp;lt;将文件f内容作为grep命令的输入&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#ls&amp;gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#cat log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ls &amp;gt;&amp;gt; log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cat log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#ls | grep f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#cat f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#grep linux &amp;lt;f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;wc&lt;/strong&gt;&lt;br&gt;Linux系统中的wc(WordCount)命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命令格式：&lt;br&gt;wc [选项]文件…  &lt;/li&gt;
&lt;li&gt;命令功能：&lt;br&gt;统计指定文件中的字节数、字数、行数，并将统计结果显示输出。该命令统计指定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所指定文件的总统计数。&lt;/li&gt;
&lt;li&gt;命令参数：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;-c 统计字节数。  &lt;/li&gt;
&lt;li&gt;-l 统计行数。  &lt;/li&gt;
&lt;li&gt;-m 统计字符数。这个标志不能与 -c 标志一起使用。  &lt;/li&gt;
&lt;li&gt;-w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。  &lt;/li&gt;
&lt;li&gt;-L 打印最长行的长度。  &lt;/li&gt;
&lt;li&gt;-help 显示帮助信息  &lt;/li&gt;
&lt;li&gt;—version 显示版本信息  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# wc f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# wc -l f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# wc -c f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# wc -m f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt;&lt;br&gt;grep是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。&lt;br&gt;grep [-acinv] [—color=auto] ‘搜寻字符串’ filename&lt;br&gt;选项与参数：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a ：将 binary 文件以 text 文件的方式搜寻数据  &lt;/li&gt;
&lt;li&gt;-c ：计算找到 ‘搜寻字符串’ 的次数  &lt;/li&gt;
&lt;li&gt;-i ：忽略大小写的不同，所以大小写视为相同  &lt;/li&gt;
&lt;li&gt;-n ：顺便输出行号  &lt;/li&gt;
&lt;li&gt;-v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行！  &lt;/li&gt;
&lt;li&gt;—color=auto ：可以将找到的关键词部分加上颜色的显示喔！  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# grep -n  l  &amp;lt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;所谓重定向顾名思义就是从一个方向转换成另一个方向。Linux输入输出的重定向是改变系统的默认的执行方式。比如某个命令本来输出的信息是打印到屏幕上的。但是我们想让他保存到一个文件中（常用的是保存系统的日志文件），这就是Linux的重定向。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>C语言的未定义行为</title>
    <link href="http://noble4cc.me/C-language-undefined-behavior/"/>
    <id>http://noble4cc.me/C-language-undefined-behavior/</id>
    <published>2015-03-11T17:20:00.000Z</published>
    <updated>2016-04-16T06:07:38.000Z</updated>
    
    <content type="html">&lt;p&gt;我们在编写C语言程序和C++程序的时候，一般会用到++或者—运算符。运算符正确使用会提高运算效率，简化程序，但是如果你这样使用的话：i=i++ + ++i。那么你一定会被他杀死不少脑细胞，而且还会得不到你想要的结果。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;未定义行为&lt;/strong&gt;&lt;br&gt;什么叫做未定义行为呢？我们来引用维基定义：&lt;br&gt;C语言中，为了简化标准，并给予实现一定的灵活性，标准特别地规定某些操作的结果是未定义的，这意味着程序员不能预测会发生什么事。&lt;br&gt;说简单一些，就是C语言标准中没有规定的部分，就是未定义部分。正如上面的例子不同的C语言编译器就会有不同的结果，我们来假设i=10，有编译器可能解释的22，有的可能是23，甚至相同编译器在debug和Release下是不同的。大学里的老师经常会这样考，甚至整张卷子上会有好几道这样的题目，更甚至有的教材根本不知道C语言未定义行为这一说，想当然的解释给读者，初学C语言的同学要注意了。&lt;br&gt;那么为什么会有未定义行为呢？C语言标准里都定义了不就行了吗？&lt;br&gt;下面我们来列举各种未定义行为：&lt;br&gt;&lt;strong&gt;修改字符串字面量：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *s=&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]=&lt;span class=&quot;string&quot;&gt;&quot;z&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//C++11直接是报错的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;除以0：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i=i/&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;异常的指针操作：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[]=&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* b=a+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;函数没有返回值：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//不过现在主流的编译器是自动加上返回值的，但是不建议这样做&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;同一运算符操作数的计算顺序：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n=f()+g();&lt;span class=&quot;comment&quot;&gt;//不同编译器的计算顺序是不一样的，如果一个函数改变了某个变量，另一个计算依赖这个变量，就能造成不同的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数各参数的求值顺序：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d,%d&quot;&lt;/span&gt;,++i,func(i));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过指针修改常量的值：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* j=(int*)&amp;amp;i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们在编写C语言程序和C++程序的时候，一般会用到++或者—运算符。运算符正确使用会提高运算效率，简化程序，但是如果你这样使用的话：i=i++ + ++i。那么你一定会被他杀死不少脑细胞，而且还会得不到你想要的结果。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://noble4cc.me/categories/C/"/>
    
    
      <category term="C++" scheme="http://noble4cc.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux笔记-用户</title>
    <link href="http://noble4cc.me/Linux-Note-the-user/"/>
    <id>http://noble4cc.me/Linux-Note-the-user/</id>
    <published>2015-02-23T00:10:00.000Z</published>
    <updated>2016-04-16T06:09:05.000Z</updated>
    
    <content type="html">&lt;p&gt;Linux是多用户多任务分时的操作系统，每个用户都必须向管理员申请ID和密码，不同的用户会有不同的权限。用户的管理主要是用户的添加、删除、权限，用户组的管理等等。其中还有有效用户ID、实际用户ID和设置用户ID的概念。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###用户&lt;br&gt;什么叫做用户其实不必多说，平常大家都能接触，但是用户组的概念相比大家感觉比较新鲜。用户组：具有相同特征的用户的集合。举个例子：比如有个文件夹dir，user1具有一定的访问权限，user2具有一定的访问权限，两个用户的权限相同的，我们可以把这两个用户归到一个用户组group1里面，group1的用户对dir具有相同的访问权限。我们修改group1的对di的访问权限，user1和user2对dir的访问权限也改变了。&lt;br&gt;还有一个概念不得不提：影子口令。下面是引用百科的解释：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎所有的类Unix操作系统的口令文件的格式都雷同，Linux亦不例外。口令安全是Linux操作系统的传统安全问题之一。&lt;br&gt;Linux使用不可逆的加密算法如DES来加密口令，由于加密算法是不可逆的，所以从密文是得不到明文的。但问题在于，/etc/passwd文件是全局可读的，加密的算法是公开的，如果有恶意用户取得了/etc/passwd文件，他就可以穷举所有可能的明文通过相同的算法计算出密文进行比较，直到相同，于是他就破解了口令。因此，针对这种安全问题，Linux/Unix广泛采用了“shadow（影子）”机制，将加密的口令转移到/etc/shadow文件里，该文件只为root超级用户可读，而同时/etc/passwd文件的密文域显示为一个x，从而最大限度减少密文泄露的机会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来讲是为了减少密码泄露而使用的安全机制。将加密的密码保存到别处，普通用户没有访问权限。  &lt;/p&gt;
&lt;h3 id=&quot;用户的管理&quot;&gt;&lt;a href=&quot;#用户的管理&quot; class=&quot;headerlink&quot; title=&quot;用户的管理&quot;&gt;&lt;/a&gt;用户的管理&lt;/h3&gt;&lt;h4 id=&quot;用户的添加&quot;&gt;&lt;a href=&quot;#用户的添加&quot; class=&quot;headerlink&quot; title=&quot;用户的添加&quot;&gt;&lt;/a&gt;用户的添加&lt;/h4&gt;&lt;p&gt;我们使用useradd和adduser命令添加用户，也许有人会问，为什么有两个命令，他俩有什么区别？&lt;br&gt;useradd只是创建了一个用户名，如 （useradd +用户名 ），它并没有在/home目录下创建同名文件夹，也没有创建密码，因此利用这个用户登录系统，是登录不了的，为了避免这样的情况出现，可以用 （useradd -m +用户名）的方式创建，它会在/home目录下创建同名文件夹，然后利用（ passwd + 用户名）为指定的用户名设置密码。&lt;br&gt;可以直接利用adduser创建新用户（adduser+用户名）这样在/home目录下会自动创建同名文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# useradd user1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# adduser usser2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# passwd user1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;添加组&quot;&gt;&lt;a href=&quot;#添加组&quot; class=&quot;headerlink&quot; title=&quot;添加组&quot;&gt;&lt;/a&gt;添加组&lt;/h4&gt;&lt;p&gt;我们使用groupadd添加组，用usermod将用户添加入组内，或者使用useradd -g在创建用户时添加组中  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# groupadd group1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# usermod -G group1 user1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# useradd -g group1 user1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;用户和组的删除&quot;&gt;&lt;a href=&quot;#用户和组的删除&quot; class=&quot;headerlink&quot; title=&quot;用户和组的删除&quot;&gt;&lt;/a&gt;用户和组的删除&lt;/h4&gt;&lt;p&gt;我们可以用userdel 来删除用户但是只是简单是删除用户，磁盘上还存着该用户的相关文件，比如home文件夹下的该用户的文件，如果我们想完全删除该用户我们必须使用userdel -r来完全删除&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# userdel user1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# groupdel group1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# userdel -r user2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;其他命令&quot;&gt;&lt;a href=&quot;#其他命令&quot; class=&quot;headerlink&quot; title=&quot;其他命令&quot;&gt;&lt;/a&gt;其他命令&lt;/h4&gt;&lt;p&gt;我们使用passwd -l 来关闭用户，来使用passwd -u来重新释放用户，id和cat /etc/passwd命令来查看用户的信息,切换用户使用su命令如果切换到root必须获得管理员权限sudo su&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# passwd user1 -l&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# passwd iser1 -u&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# id user1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cat /etc/passwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# su user1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;相关文件&quot;&gt;&lt;a href=&quot;#相关文件&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;相关文件&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;与用户（user）相关的配置文件&lt;/strong&gt;&lt;br&gt;/etc/passwd 注：用户（user）的配置文件；&lt;br&gt;/etc/shadow 注：用户（user）影子口令文件；  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与用户组（group）相关的配置文件&lt;/strong&gt;&lt;br&gt;/etc/group 注：用户组（group）配置文件；&lt;br&gt;/etc/gshadow 注：用户组（group）的影子文件；  &lt;/p&gt;
&lt;h3 id=&quot;有效用户ID、实际用户ID和设置用户ID&quot;&gt;&lt;a href=&quot;#有效用户ID、实际用户ID和设置用户ID&quot; class=&quot;headerlink&quot; title=&quot;有效用户ID、实际用户ID和设置用户ID&quot;&gt;&lt;/a&gt;有效用户ID、实际用户ID和设置用户ID&lt;/h3&gt;&lt;p&gt;Linux中的实际用户ID，有效用户ID和保存的设置用户ID一般是对于进程而言的，具体概念如下：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实际用户ID(real user-id)：标明进程的执行者是谁。&lt;/li&gt;
&lt;li&gt;有效用户ID(effective user-id)：标明进程执行时对文件的访问权限&lt;/li&gt;
&lt;li&gt;设置用户ID(saved set-user-id)：用于对外权限的开放，它是跟文件而不是跟用户绑定。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实际用户ID也叫做RUID：&lt;/strong&gt;这两个是和用户绑定的，RUID是用于在系统中标识一个用户是谁，当用户使用用户名和密码成功登录后一个类UNIX系统后就唯一确定了他的RUID。&lt;br&gt;&lt;strong&gt;有效用户ID也叫做EUID：&lt;/strong&gt;用于系统决定用户对系统资源的访问权限，通常情况下等于RUID。&lt;br&gt;&lt;strong&gt;设置用户ID也叫做SUID：&lt;/strong&gt;在说明这个ID时我们来举一个例子。  &lt;/p&gt;
&lt;p&gt;大家都知道用户的密码是加密后存储在/etc/shadow这个文件中的。shadow的权限是：-r———— 1 root root。也就是说只有root用户才能访问他，其他的用户不能访问他。那其他用户是通过passwd这个命令来修改自己的密码的。 &lt;/p&gt;
&lt;p&gt;/usr/bin/passwd这个命令的的权限是：-r-s—x—x 1 root root 。对应文件存取标志的s位就是通常说的SUID位，另外可以看到所有用户都有执行的这个程序权力。当一个普通用户user1执行passwd这个命令时，会根据SUID位将user1的EUID设成root的，这时user1就有了读写shadow文件的权限，进行密码的修改。当passwd执行结束后，user1的EUID又被设成原来的EUID（与RUID一样），这样即修改了密码，又能限定user1的权限。&lt;br&gt;&lt;code&gt;对于用户ID的规则同样可以推广到组ID中。&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux是多用户多任务分时的操作系统，每个用户都必须向管理员申请ID和密码，不同的用户会有不同的权限。用户的管理主要是用户的添加、删除、权限，用户组的管理等等。其中还有有效用户ID、实际用户ID和设置用户ID的概念。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://noble4cc.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noble4cc.me/tags/Linux/"/>
    
  </entry>
  
</feed>
